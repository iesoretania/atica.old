<?php



/**
 * This class defines the structure of the 'revision' table.
 *
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.atica.map
 */
class RevisionTableMap extends TableMap
{

    /**
     * The (dot-path) name of this class
     */
    const CLASS_NAME = 'atica.map.RevisionTableMap';

    /**
     * Initialize the table attributes, columns and validators
     * Relations are not initialized by this method since they are lazy loaded
     *
     * @return void
     * @throws PropelException
     */
    public function initialize()
    {
        // attributes
        $this->setName('revision');
        $this->setPhpName('Revision');
        $this->setClassname('Revision');
        $this->setPackage('atica');
        $this->setUseIdGenerator(true);
        // columns
        $this->addPrimaryKey('ID', 'Id', 'INTEGER', true, 10, null);
        $this->addForeignKey('DELIVERY_ID', 'DeliveryId', 'INTEGER', 'delivery', 'ID', true, null, null);
        $this->addColumn('ORDER_NR', 'OrderNr', 'INTEGER', true, null, null);
        $this->addColumn('REVISION_NR', 'RevisionNr', 'INTEGER', false, null, null);
        $this->addForeignKey('UPLOADER_PERSON_ID', 'UploaderPersonId', 'INTEGER', 'person', 'ID', true, null, null);
        $this->addForeignKey('REVIEWER_PERSON_ID', 'ReviewerPersonId', 'INTEGER', 'person', 'ID', false, null, null);
        $this->addForeignKey('APPROVER_PERSON_ID', 'ApproverPersonId', 'INTEGER', 'person', 'ID', false, null, null);
        $this->addColumn('UPLOAD_DATE', 'UploadDate', 'TIMESTAMP', true, null, null);
        $this->addColumn('REVIEW_DATE', 'ReviewDate', 'TIMESTAMP', false, null, null);
        $this->addColumn('APPROVAL_DATE', 'ApprovalDate', 'TIMESTAMP', false, null, null);
        $this->addColumn('UPLOAD_COMMENT', 'UploadComment', 'LONGVARCHAR', true, null, null);
        $this->addColumn('REVIEW_COMMENT', 'ReviewComment', 'LONGVARCHAR', false, null, null);
        $this->addColumn('APPROVAL_COMMENT', 'ApprovalComment', 'LONGVARCHAR', false, null, null);
        $this->addColumn('ORIGINAL_DOCUMENT', 'OriginalDocument', 'INTEGER', false, null, null);
        $this->addColumn('AUTOGENERATED_DATE', 'AutogeneratedDate', 'TIMESTAMP', false, null, null);
        $this->addColumn('TEMPLATE', 'Template', 'INTEGER', false, null, null);
        $this->addColumn('TEMPLATE_INSTANCE', 'TemplateInstance', 'INTEGER', false, null, null);
        // validators
    } // initialize()

    /**
     * Build the RelationMap objects for this table relationships
     */
    public function buildRelations()
    {
        $this->addRelation('PersonRelatedByApproverPersonId', 'Person', RelationMap::MANY_TO_ONE, array('approver_person_id' => 'id', ), 'CASCADE', 'CASCADE');
        $this->addRelation('DeliveryRelatedByDeliveryId', 'Delivery', RelationMap::MANY_TO_ONE, array('delivery_id' => 'id', ), 'CASCADE', 'CASCADE');
        $this->addRelation('PersonRelatedByReviewerPersonId', 'Person', RelationMap::MANY_TO_ONE, array('reviewer_person_id' => 'id', ), 'CASCADE', 'CASCADE');
        $this->addRelation('PersonRelatedByUploaderPersonId', 'Person', RelationMap::MANY_TO_ONE, array('uploader_person_id' => 'id', ), 'CASCADE', 'CASCADE');
        $this->addRelation('DeliveryRelatedByCurrentRevisionId', 'Delivery', RelationMap::ONE_TO_MANY, array('id' => 'current_revision_id', ), 'CASCADE', 'CASCADE', 'DeliveriesRelatedByCurrentRevisionId');
        $this->addRelation('Document', 'Document', RelationMap::ONE_TO_MANY, array('id' => 'revision_id', ), 'CASCADE', null, 'Documents');
    } // buildRelations()

    /**
     *
     * Gets the list of behaviors registered for this table
     *
     * @return array Associative array (name => parameters) of behaviors
     */
    public function getBehaviors()
    {
        return array(
            'sortable' => array('rank_column' => 'order_nr', 'use_scope' => 'true', 'scope_column' => 'delivery_id', ),
        );
    } // getBehaviors()

} // RevisionTableMap
