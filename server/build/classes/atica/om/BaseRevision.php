<?php


/**
 * Base class that represents a row from the 'revision' table.
 *
 *
 *
 * @package    propel.generator.atica.om
 */
abstract class BaseRevision extends BaseObject implements Persistent
{
    /**
     * Peer class name
     */
    const PEER = 'RevisionPeer';

    /**
     * The Peer class.
     * Instance provides a convenient way of calling static methods on a class
     * that calling code may not be able to identify.
     * @var        RevisionPeer
     */
    protected static $peer;

    /**
     * The flag var to prevent infinit loop in deep copy
     * @var       boolean
     */
    protected $startCopy = false;

    /**
     * The value for the id field.
     * @var        int
     */
    protected $id;

    /**
     * The value for the delivery_id field.
     * @var        int
     */
    protected $delivery_id;

    /**
     * The value for the order_nr field.
     * @var        int
     */
    protected $order_nr;

    /**
     * The value for the revision_nr field.
     * @var        int
     */
    protected $revision_nr;

    /**
     * The value for the uploader_person_id field.
     * @var        int
     */
    protected $uploader_person_id;

    /**
     * The value for the reviewer_person_id field.
     * @var        int
     */
    protected $reviewer_person_id;

    /**
     * The value for the approver_person_id field.
     * @var        int
     */
    protected $approver_person_id;

    /**
     * The value for the upload_date field.
     * @var        string
     */
    protected $upload_date;

    /**
     * The value for the review_date field.
     * @var        string
     */
    protected $review_date;

    /**
     * The value for the approval_date field.
     * @var        string
     */
    protected $approval_date;

    /**
     * The value for the upload_comment field.
     * @var        string
     */
    protected $upload_comment;

    /**
     * The value for the review_comment field.
     * @var        string
     */
    protected $review_comment;

    /**
     * The value for the approval_comment field.
     * @var        string
     */
    protected $approval_comment;

    /**
     * The value for the original_document field.
     * @var        int
     */
    protected $original_document;

    /**
     * The value for the autogenerated_date field.
     * @var        string
     */
    protected $autogenerated_date;

    /**
     * The value for the template field.
     * @var        int
     */
    protected $template;

    /**
     * The value for the template_instance field.
     * @var        int
     */
    protected $template_instance;

    /**
     * @var        Person
     */
    protected $aPersonRelatedByApproverPersonId;

    /**
     * @var        Delivery
     */
    protected $aDeliveryRelatedByDeliveryId;

    /**
     * @var        Person
     */
    protected $aPersonRelatedByReviewerPersonId;

    /**
     * @var        Person
     */
    protected $aPersonRelatedByUploaderPersonId;

    /**
     * @var        PropelObjectCollection|Delivery[] Collection to store aggregation of Delivery objects.
     */
    protected $collDeliveriesRelatedByCurrentRevisionId;
    protected $collDeliveriesRelatedByCurrentRevisionIdPartial;

    /**
     * @var        PropelObjectCollection|Document[] Collection to store aggregation of Document objects.
     */
    protected $collDocuments;
    protected $collDocumentsPartial;

    /**
     * Flag to prevent endless save loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInSave = false;

    /**
     * Flag to prevent endless validation loop, if this object is referenced
     * by another object which falls in this transaction.
     * @var        boolean
     */
    protected $alreadyInValidation = false;

    // sortable behavior

    /**
     * Queries to be executed in the save transaction
     * @var        array
     */
    protected $sortableQueries = array();

    /**
     * The old scope value.
     * @var        int
     */
    protected $oldScope;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $deliveriesRelatedByCurrentRevisionIdScheduledForDeletion = null;

    /**
     * An array of objects scheduled for deletion.
     * @var		PropelObjectCollection
     */
    protected $documentsScheduledForDeletion = null;

    /**
     * Get the [id] column value.
     *
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Get the [delivery_id] column value.
     *
     * @return int
     */
    public function getDeliveryId()
    {
        return $this->delivery_id;
    }

    /**
     * Get the [order_nr] column value.
     *
     * @return int
     */
    public function getOrderNr()
    {
        return $this->order_nr;
    }

    /**
     * Get the [revision_nr] column value.
     *
     * @return int
     */
    public function getRevisionNr()
    {
        return $this->revision_nr;
    }

    /**
     * Get the [uploader_person_id] column value.
     *
     * @return int
     */
    public function getUploaderPersonId()
    {
        return $this->uploader_person_id;
    }

    /**
     * Get the [reviewer_person_id] column value.
     *
     * @return int
     */
    public function getReviewerPersonId()
    {
        return $this->reviewer_person_id;
    }

    /**
     * Get the [approver_person_id] column value.
     *
     * @return int
     */
    public function getApproverPersonId()
    {
        return $this->approver_person_id;
    }

    /**
     * Get the [optionally formatted] temporal [upload_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getUploadDate($format = 'Y-m-d H:i:s')
    {
        if ($this->upload_date === null) {
            return null;
        }

        if ($this->upload_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->upload_date);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->upload_date, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [review_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getReviewDate($format = 'Y-m-d H:i:s')
    {
        if ($this->review_date === null) {
            return null;
        }

        if ($this->review_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->review_date);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->review_date, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [optionally formatted] temporal [approval_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getApprovalDate($format = 'Y-m-d H:i:s')
    {
        if ($this->approval_date === null) {
            return null;
        }

        if ($this->approval_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->approval_date);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->approval_date, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [upload_comment] column value.
     *
     * @return string
     */
    public function getUploadComment()
    {
        return $this->upload_comment;
    }

    /**
     * Get the [review_comment] column value.
     *
     * @return string
     */
    public function getReviewComment()
    {
        return $this->review_comment;
    }

    /**
     * Get the [approval_comment] column value.
     *
     * @return string
     */
    public function getApprovalComment()
    {
        return $this->approval_comment;
    }

    /**
     * Get the [original_document] column value.
     *
     * @return int
     */
    public function getOriginalDocument()
    {
        return $this->original_document;
    }

    /**
     * Get the [optionally formatted] temporal [autogenerated_date] column value.
     *
     *
     * @param string $format The date/time format string (either date()-style or strftime()-style).
     *				 If format is null, then the raw DateTime object will be returned.
     * @return mixed Formatted date/time value as string or DateTime object (if format is null), null if column is null, and 0 if column value is 0000-00-00 00:00:00
     * @throws PropelException - if unable to parse/validate the date/time value.
     */
    public function getAutogeneratedDate($format = 'Y-m-d H:i:s')
    {
        if ($this->autogenerated_date === null) {
            return null;
        }

        if ($this->autogenerated_date === '0000-00-00 00:00:00') {
            // while technically this is not a default value of null,
            // this seems to be closest in meaning.
            return null;
        } else {
            try {
                $dt = new DateTime($this->autogenerated_date);
            } catch (Exception $x) {
                throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->autogenerated_date, true), $x);
            }
        }

        if ($format === null) {
            // Because propel.useDateTimeClass is true, we return a DateTime object.
            return $dt;
        } elseif (strpos($format, '%') !== false) {
            return strftime($format, $dt->format('U'));
        } else {
            return $dt->format($format);
        }
    }

    /**
     * Get the [template] column value.
     *
     * @return int
     */
    public function getTemplate()
    {
        return $this->template;
    }

    /**
     * Get the [template_instance] column value.
     *
     * @return int
     */
    public function getTemplateInstance()
    {
        return $this->template_instance;
    }

    /**
     * Set the value of [id] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->id !== $v) {
            $this->id = $v;
            $this->modifiedColumns[] = RevisionPeer::ID;
        }


        return $this;
    } // setId()

    /**
     * Set the value of [delivery_id] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setDeliveryId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->delivery_id !== $v) {
            // sortable behavior
            $this->oldScope = $this->getDeliveryId();

            $this->delivery_id = $v;
            $this->modifiedColumns[] = RevisionPeer::DELIVERY_ID;
        }

        if ($this->aDeliveryRelatedByDeliveryId !== null && $this->aDeliveryRelatedByDeliveryId->getId() !== $v) {
            $this->aDeliveryRelatedByDeliveryId = null;
        }


        return $this;
    } // setDeliveryId()

    /**
     * Set the value of [order_nr] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setOrderNr($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->order_nr !== $v) {
            $this->order_nr = $v;
            $this->modifiedColumns[] = RevisionPeer::ORDER_NR;
        }


        return $this;
    } // setOrderNr()

    /**
     * Set the value of [revision_nr] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setRevisionNr($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->revision_nr !== $v) {
            $this->revision_nr = $v;
            $this->modifiedColumns[] = RevisionPeer::REVISION_NR;
        }


        return $this;
    } // setRevisionNr()

    /**
     * Set the value of [uploader_person_id] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setUploaderPersonId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->uploader_person_id !== $v) {
            $this->uploader_person_id = $v;
            $this->modifiedColumns[] = RevisionPeer::UPLOADER_PERSON_ID;
        }

        if ($this->aPersonRelatedByUploaderPersonId !== null && $this->aPersonRelatedByUploaderPersonId->getId() !== $v) {
            $this->aPersonRelatedByUploaderPersonId = null;
        }


        return $this;
    } // setUploaderPersonId()

    /**
     * Set the value of [reviewer_person_id] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setReviewerPersonId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->reviewer_person_id !== $v) {
            $this->reviewer_person_id = $v;
            $this->modifiedColumns[] = RevisionPeer::REVIEWER_PERSON_ID;
        }

        if ($this->aPersonRelatedByReviewerPersonId !== null && $this->aPersonRelatedByReviewerPersonId->getId() !== $v) {
            $this->aPersonRelatedByReviewerPersonId = null;
        }


        return $this;
    } // setReviewerPersonId()

    /**
     * Set the value of [approver_person_id] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setApproverPersonId($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->approver_person_id !== $v) {
            $this->approver_person_id = $v;
            $this->modifiedColumns[] = RevisionPeer::APPROVER_PERSON_ID;
        }

        if ($this->aPersonRelatedByApproverPersonId !== null && $this->aPersonRelatedByApproverPersonId->getId() !== $v) {
            $this->aPersonRelatedByApproverPersonId = null;
        }


        return $this;
    } // setApproverPersonId()

    /**
     * Sets the value of [upload_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Revision The current object (for fluent API support)
     */
    public function setUploadDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->upload_date !== null || $dt !== null) {
            $currentDateAsString = ($this->upload_date !== null && $tmpDt = new DateTime($this->upload_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->upload_date = $newDateAsString;
                $this->modifiedColumns[] = RevisionPeer::UPLOAD_DATE;
            }
        } // if either are not null


        return $this;
    } // setUploadDate()

    /**
     * Sets the value of [review_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Revision The current object (for fluent API support)
     */
    public function setReviewDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->review_date !== null || $dt !== null) {
            $currentDateAsString = ($this->review_date !== null && $tmpDt = new DateTime($this->review_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->review_date = $newDateAsString;
                $this->modifiedColumns[] = RevisionPeer::REVIEW_DATE;
            }
        } // if either are not null


        return $this;
    } // setReviewDate()

    /**
     * Sets the value of [approval_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Revision The current object (for fluent API support)
     */
    public function setApprovalDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->approval_date !== null || $dt !== null) {
            $currentDateAsString = ($this->approval_date !== null && $tmpDt = new DateTime($this->approval_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->approval_date = $newDateAsString;
                $this->modifiedColumns[] = RevisionPeer::APPROVAL_DATE;
            }
        } // if either are not null


        return $this;
    } // setApprovalDate()

    /**
     * Set the value of [upload_comment] column.
     *
     * @param string $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setUploadComment($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->upload_comment !== $v) {
            $this->upload_comment = $v;
            $this->modifiedColumns[] = RevisionPeer::UPLOAD_COMMENT;
        }


        return $this;
    } // setUploadComment()

    /**
     * Set the value of [review_comment] column.
     *
     * @param string $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setReviewComment($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->review_comment !== $v) {
            $this->review_comment = $v;
            $this->modifiedColumns[] = RevisionPeer::REVIEW_COMMENT;
        }


        return $this;
    } // setReviewComment()

    /**
     * Set the value of [approval_comment] column.
     *
     * @param string $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setApprovalComment($v)
    {
        if ($v !== null) {
            $v = (string) $v;
        }

        if ($this->approval_comment !== $v) {
            $this->approval_comment = $v;
            $this->modifiedColumns[] = RevisionPeer::APPROVAL_COMMENT;
        }


        return $this;
    } // setApprovalComment()

    /**
     * Set the value of [original_document] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setOriginalDocument($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->original_document !== $v) {
            $this->original_document = $v;
            $this->modifiedColumns[] = RevisionPeer::ORIGINAL_DOCUMENT;
        }


        return $this;
    } // setOriginalDocument()

    /**
     * Sets the value of [autogenerated_date] column to a normalized version of the date/time value specified.
     *
     * @param mixed $v string, integer (timestamp), or DateTime value.
     *               Empty strings are treated as null.
     * @return Revision The current object (for fluent API support)
     */
    public function setAutogeneratedDate($v)
    {
        $dt = PropelDateTime::newInstance($v, null, 'DateTime');
        if ($this->autogenerated_date !== null || $dt !== null) {
            $currentDateAsString = ($this->autogenerated_date !== null && $tmpDt = new DateTime($this->autogenerated_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
            $newDateAsString = $dt ? $dt->format('Y-m-d H:i:s') : null;
            if ($currentDateAsString !== $newDateAsString) {
                $this->autogenerated_date = $newDateAsString;
                $this->modifiedColumns[] = RevisionPeer::AUTOGENERATED_DATE;
            }
        } // if either are not null


        return $this;
    } // setAutogeneratedDate()

    /**
     * Set the value of [template] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setTemplate($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->template !== $v) {
            $this->template = $v;
            $this->modifiedColumns[] = RevisionPeer::TEMPLATE;
        }


        return $this;
    } // setTemplate()

    /**
     * Set the value of [template_instance] column.
     *
     * @param int $v new value
     * @return Revision The current object (for fluent API support)
     */
    public function setTemplateInstance($v)
    {
        if ($v !== null) {
            $v = (int) $v;
        }

        if ($this->template_instance !== $v) {
            $this->template_instance = $v;
            $this->modifiedColumns[] = RevisionPeer::TEMPLATE_INSTANCE;
        }


        return $this;
    } // setTemplateInstance()

    /**
     * Indicates whether the columns in this object are only set to default values.
     *
     * This method can be used in conjunction with isModified() to indicate whether an object is both
     * modified _and_ has some values set which are non-default.
     *
     * @return boolean Whether the columns in this object are only been set with default values.
     */
    public function hasOnlyDefaultValues()
    {
        // otherwise, everything was equal, so return true
        return true;
    } // hasOnlyDefaultValues()

    /**
     * Hydrates (populates) the object variables with values from the database resultset.
     *
     * An offset (0-based "start column") is specified so that objects can be hydrated
     * with a subset of the columns in the resultset rows.  This is needed, for example,
     * for results of JOIN queries where the resultset row includes columns from two or
     * more tables.
     *
     * @param array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
     * @param int $startcol 0-based offset column which indicates which restultset column to start with.
     * @param boolean $rehydrate Whether this object is being re-hydrated from the database.
     * @return int             next starting column
     * @throws PropelException - Any caught Exception will be rewrapped as a PropelException.
     */
    public function hydrate($row, $startcol = 0, $rehydrate = false)
    {
        try {

            $this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
            $this->delivery_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
            $this->order_nr = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
            $this->revision_nr = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
            $this->uploader_person_id = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
            $this->reviewer_person_id = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
            $this->approver_person_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
            $this->upload_date = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
            $this->review_date = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
            $this->approval_date = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
            $this->upload_comment = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
            $this->review_comment = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
            $this->approval_comment = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
            $this->original_document = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
            $this->autogenerated_date = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
            $this->template = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
            $this->template_instance = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
            $this->resetModified();

            $this->setNew(false);

            if ($rehydrate) {
                $this->ensureConsistency();
            }

            return $startcol + 17; // 17 = RevisionPeer::NUM_HYDRATE_COLUMNS.

        } catch (Exception $e) {
            throw new PropelException("Error populating Revision object", $e);
        }
    }

    /**
     * Checks and repairs the internal consistency of the object.
     *
     * This method is executed after an already-instantiated object is re-hydrated
     * from the database.  It exists to check any foreign keys to make sure that
     * the objects related to the current object are correct based on foreign key.
     *
     * You can override this method in the stub class, but you should always invoke
     * the base method from the overridden method (i.e. parent::ensureConsistency()),
     * in case your model changes.
     *
     * @throws PropelException
     */
    public function ensureConsistency()
    {

        if ($this->aDeliveryRelatedByDeliveryId !== null && $this->delivery_id !== $this->aDeliveryRelatedByDeliveryId->getId()) {
            $this->aDeliveryRelatedByDeliveryId = null;
        }
        if ($this->aPersonRelatedByUploaderPersonId !== null && $this->uploader_person_id !== $this->aPersonRelatedByUploaderPersonId->getId()) {
            $this->aPersonRelatedByUploaderPersonId = null;
        }
        if ($this->aPersonRelatedByReviewerPersonId !== null && $this->reviewer_person_id !== $this->aPersonRelatedByReviewerPersonId->getId()) {
            $this->aPersonRelatedByReviewerPersonId = null;
        }
        if ($this->aPersonRelatedByApproverPersonId !== null && $this->approver_person_id !== $this->aPersonRelatedByApproverPersonId->getId()) {
            $this->aPersonRelatedByApproverPersonId = null;
        }
    } // ensureConsistency

    /**
     * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
     *
     * This will only work if the object has been saved and has a valid primary key set.
     *
     * @param boolean $deep (optional) Whether to also de-associated any related objects.
     * @param PropelPDO $con (optional) The PropelPDO connection to use.
     * @return void
     * @throws PropelException - if this object is deleted, unsaved or doesn't have pk match in db
     */
    public function reload($deep = false, PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("Cannot reload a deleted object.");
        }

        if ($this->isNew()) {
            throw new PropelException("Cannot reload an unsaved object.");
        }

        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }

        // We don't need to alter the object instance pool; we're just modifying this instance
        // already in the pool.

        $stmt = RevisionPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
        $row = $stmt->fetch(PDO::FETCH_NUM);
        $stmt->closeCursor();
        if (!$row) {
            throw new PropelException('Cannot find matching row in the database to reload object values.');
        }
        $this->hydrate($row, 0, true); // rehydrate

        if ($deep) {  // also de-associate any related objects?

            $this->aPersonRelatedByApproverPersonId = null;
            $this->aDeliveryRelatedByDeliveryId = null;
            $this->aPersonRelatedByReviewerPersonId = null;
            $this->aPersonRelatedByUploaderPersonId = null;
            $this->collDeliveriesRelatedByCurrentRevisionId = null;

            $this->collDocuments = null;

        } // if (deep)
    }

    /**
     * Removes this object from datastore and sets delete attribute.
     *
     * @param PropelPDO $con
     * @return void
     * @throws PropelException
     * @throws Exception
     * @see        BaseObject::setDeleted()
     * @see        BaseObject::isDeleted()
     */
    public function delete(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("This object has already been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        try {
            $deleteQuery = RevisionQuery::create()
                ->filterByPrimaryKey($this->getPrimaryKey());
            $ret = $this->preDelete($con);
            // sortable behavior

            RevisionPeer::shiftRank(-1, $this->getOrderNr() + 1, null, $this->getDeliveryId(), $con);
            RevisionPeer::clearInstancePool();

            if ($ret) {
                $deleteQuery->delete($con);
                $this->postDelete($con);
                $con->commit();
                $this->setDeleted(true);
            } else {
                $con->commit();
            }
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Persists this object to the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All modified related objects will also be persisted in the doSave()
     * method.  This method wraps all precipitate database operations in a
     * single transaction.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @throws Exception
     * @see        doSave()
     */
    public function save(PropelPDO $con = null)
    {
        if ($this->isDeleted()) {
            throw new PropelException("You cannot save an object that has been deleted.");
        }

        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
        }

        $con->beginTransaction();
        $isInsert = $this->isNew();
        try {
            $ret = $this->preSave($con);
            // sortable behavior
            $this->processSortableQueries($con);
            if ($isInsert) {
                $ret = $ret && $this->preInsert($con);
                // sortable behavior
                if (!$this->isColumnModified(RevisionPeer::RANK_COL)) {
                    $this->setOrderNr(RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con) + 1);
                }

            } else {
                $ret = $ret && $this->preUpdate($con);
                // sortable behavior
                // if scope has changed and rank was not modified (if yes, assuming superior action)
                // insert object to the end of new scope and cleanup old one
                if ($this->isColumnModified(RevisionPeer::SCOPE_COL) && !$this->isColumnModified(RevisionPeer::RANK_COL)) {
                    RevisionPeer::shiftRank(-1, $this->getOrderNr() + 1, null, $this->oldScope, $con);
                    $this->insertAtBottom($con);
                }

            }
            if ($ret) {
                $affectedRows = $this->doSave($con);
                if ($isInsert) {
                    $this->postInsert($con);
                } else {
                    $this->postUpdate($con);
                }
                $this->postSave($con);
                RevisionPeer::addInstanceToPool($this);
            } else {
                $affectedRows = 0;
            }
            $con->commit();

            return $affectedRows;
        } catch (Exception $e) {
            $con->rollBack();
            throw $e;
        }
    }

    /**
     * Performs the work of inserting or updating the row in the database.
     *
     * If the object is new, it inserts it; otherwise an update is performed.
     * All related objects are also updated in this method.
     *
     * @param PropelPDO $con
     * @return int             The number of rows affected by this insert/update and any referring fk objects' save() operations.
     * @throws PropelException
     * @see        save()
     */
    protected function doSave(PropelPDO $con)
    {
        $affectedRows = 0; // initialize var to track total num of affected rows
        if (!$this->alreadyInSave) {
            $this->alreadyInSave = true;

            // We call the save method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPersonRelatedByApproverPersonId !== null) {
                if ($this->aPersonRelatedByApproverPersonId->isModified() || $this->aPersonRelatedByApproverPersonId->isNew()) {
                    $affectedRows += $this->aPersonRelatedByApproverPersonId->save($con);
                }
                $this->setPersonRelatedByApproverPersonId($this->aPersonRelatedByApproverPersonId);
            }

            if ($this->aDeliveryRelatedByDeliveryId !== null) {
                if ($this->aDeliveryRelatedByDeliveryId->isModified() || $this->aDeliveryRelatedByDeliveryId->isNew()) {
                    $affectedRows += $this->aDeliveryRelatedByDeliveryId->save($con);
                }
                $this->setDeliveryRelatedByDeliveryId($this->aDeliveryRelatedByDeliveryId);
            }

            if ($this->aPersonRelatedByReviewerPersonId !== null) {
                if ($this->aPersonRelatedByReviewerPersonId->isModified() || $this->aPersonRelatedByReviewerPersonId->isNew()) {
                    $affectedRows += $this->aPersonRelatedByReviewerPersonId->save($con);
                }
                $this->setPersonRelatedByReviewerPersonId($this->aPersonRelatedByReviewerPersonId);
            }

            if ($this->aPersonRelatedByUploaderPersonId !== null) {
                if ($this->aPersonRelatedByUploaderPersonId->isModified() || $this->aPersonRelatedByUploaderPersonId->isNew()) {
                    $affectedRows += $this->aPersonRelatedByUploaderPersonId->save($con);
                }
                $this->setPersonRelatedByUploaderPersonId($this->aPersonRelatedByUploaderPersonId);
            }

            if ($this->isNew() || $this->isModified()) {
                // persist changes
                if ($this->isNew()) {
                    $this->doInsert($con);
                } else {
                    $this->doUpdate($con);
                }
                $affectedRows += 1;
                $this->resetModified();
            }

            if ($this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion !== null) {
                if (!$this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion->isEmpty()) {
                    foreach ($this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion as $deliveryRelatedByCurrentRevisionId) {
                        // need to save related object because we set the relation to null
                        $deliveryRelatedByCurrentRevisionId->save($con);
                    }
                    $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion = null;
                }
            }

            if ($this->collDeliveriesRelatedByCurrentRevisionId !== null) {
                foreach ($this->collDeliveriesRelatedByCurrentRevisionId as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            if ($this->documentsScheduledForDeletion !== null) {
                if (!$this->documentsScheduledForDeletion->isEmpty()) {
                    DocumentQuery::create()
                        ->filterByPrimaryKeys($this->documentsScheduledForDeletion->getPrimaryKeys(false))
                        ->delete($con);
                    $this->documentsScheduledForDeletion = null;
                }
            }

            if ($this->collDocuments !== null) {
                foreach ($this->collDocuments as $referrerFK) {
                    if (!$referrerFK->isDeleted()) {
                        $affectedRows += $referrerFK->save($con);
                    }
                }
            }

            $this->alreadyInSave = false;

        }

        return $affectedRows;
    } // doSave()

    /**
     * Insert the row in the database.
     *
     * @param PropelPDO $con
     *
     * @throws PropelException
     * @see        doSave()
     */
    protected function doInsert(PropelPDO $con)
    {
        $modifiedColumns = array();
        $index = 0;

        $this->modifiedColumns[] = RevisionPeer::ID;
        if (null !== $this->id) {
            throw new PropelException('Cannot insert a value for auto-increment primary key (' . RevisionPeer::ID . ')');
        }

         // check the columns in natural order for more readable SQL queries
        if ($this->isColumnModified(RevisionPeer::ID)) {
            $modifiedColumns[':p' . $index++]  = '`ID`';
        }
        if ($this->isColumnModified(RevisionPeer::DELIVERY_ID)) {
            $modifiedColumns[':p' . $index++]  = '`DELIVERY_ID`';
        }
        if ($this->isColumnModified(RevisionPeer::ORDER_NR)) {
            $modifiedColumns[':p' . $index++]  = '`ORDER_NR`';
        }
        if ($this->isColumnModified(RevisionPeer::REVISION_NR)) {
            $modifiedColumns[':p' . $index++]  = '`REVISION_NR`';
        }
        if ($this->isColumnModified(RevisionPeer::UPLOADER_PERSON_ID)) {
            $modifiedColumns[':p' . $index++]  = '`UPLOADER_PERSON_ID`';
        }
        if ($this->isColumnModified(RevisionPeer::REVIEWER_PERSON_ID)) {
            $modifiedColumns[':p' . $index++]  = '`REVIEWER_PERSON_ID`';
        }
        if ($this->isColumnModified(RevisionPeer::APPROVER_PERSON_ID)) {
            $modifiedColumns[':p' . $index++]  = '`APPROVER_PERSON_ID`';
        }
        if ($this->isColumnModified(RevisionPeer::UPLOAD_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`UPLOAD_DATE`';
        }
        if ($this->isColumnModified(RevisionPeer::REVIEW_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`REVIEW_DATE`';
        }
        if ($this->isColumnModified(RevisionPeer::APPROVAL_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`APPROVAL_DATE`';
        }
        if ($this->isColumnModified(RevisionPeer::UPLOAD_COMMENT)) {
            $modifiedColumns[':p' . $index++]  = '`UPLOAD_COMMENT`';
        }
        if ($this->isColumnModified(RevisionPeer::REVIEW_COMMENT)) {
            $modifiedColumns[':p' . $index++]  = '`REVIEW_COMMENT`';
        }
        if ($this->isColumnModified(RevisionPeer::APPROVAL_COMMENT)) {
            $modifiedColumns[':p' . $index++]  = '`APPROVAL_COMMENT`';
        }
        if ($this->isColumnModified(RevisionPeer::ORIGINAL_DOCUMENT)) {
            $modifiedColumns[':p' . $index++]  = '`ORIGINAL_DOCUMENT`';
        }
        if ($this->isColumnModified(RevisionPeer::AUTOGENERATED_DATE)) {
            $modifiedColumns[':p' . $index++]  = '`AUTOGENERATED_DATE`';
        }
        if ($this->isColumnModified(RevisionPeer::TEMPLATE)) {
            $modifiedColumns[':p' . $index++]  = '`TEMPLATE`';
        }
        if ($this->isColumnModified(RevisionPeer::TEMPLATE_INSTANCE)) {
            $modifiedColumns[':p' . $index++]  = '`TEMPLATE_INSTANCE`';
        }

        $sql = sprintf(
            'INSERT INTO `revision` (%s) VALUES (%s)',
            implode(', ', $modifiedColumns),
            implode(', ', array_keys($modifiedColumns))
        );

        try {
            $stmt = $con->prepare($sql);
            foreach ($modifiedColumns as $identifier => $columnName) {
                switch ($columnName) {
                    case '`ID`':
                        $stmt->bindValue($identifier, $this->id, PDO::PARAM_INT);
                        break;
                    case '`DELIVERY_ID`':
                        $stmt->bindValue($identifier, $this->delivery_id, PDO::PARAM_INT);
                        break;
                    case '`ORDER_NR`':
                        $stmt->bindValue($identifier, $this->order_nr, PDO::PARAM_INT);
                        break;
                    case '`REVISION_NR`':
                        $stmt->bindValue($identifier, $this->revision_nr, PDO::PARAM_INT);
                        break;
                    case '`UPLOADER_PERSON_ID`':
                        $stmt->bindValue($identifier, $this->uploader_person_id, PDO::PARAM_INT);
                        break;
                    case '`REVIEWER_PERSON_ID`':
                        $stmt->bindValue($identifier, $this->reviewer_person_id, PDO::PARAM_INT);
                        break;
                    case '`APPROVER_PERSON_ID`':
                        $stmt->bindValue($identifier, $this->approver_person_id, PDO::PARAM_INT);
                        break;
                    case '`UPLOAD_DATE`':
                        $stmt->bindValue($identifier, $this->upload_date, PDO::PARAM_STR);
                        break;
                    case '`REVIEW_DATE`':
                        $stmt->bindValue($identifier, $this->review_date, PDO::PARAM_STR);
                        break;
                    case '`APPROVAL_DATE`':
                        $stmt->bindValue($identifier, $this->approval_date, PDO::PARAM_STR);
                        break;
                    case '`UPLOAD_COMMENT`':
                        $stmt->bindValue($identifier, $this->upload_comment, PDO::PARAM_STR);
                        break;
                    case '`REVIEW_COMMENT`':
                        $stmt->bindValue($identifier, $this->review_comment, PDO::PARAM_STR);
                        break;
                    case '`APPROVAL_COMMENT`':
                        $stmt->bindValue($identifier, $this->approval_comment, PDO::PARAM_STR);
                        break;
                    case '`ORIGINAL_DOCUMENT`':
                        $stmt->bindValue($identifier, $this->original_document, PDO::PARAM_INT);
                        break;
                    case '`AUTOGENERATED_DATE`':
                        $stmt->bindValue($identifier, $this->autogenerated_date, PDO::PARAM_STR);
                        break;
                    case '`TEMPLATE`':
                        $stmt->bindValue($identifier, $this->template, PDO::PARAM_INT);
                        break;
                    case '`TEMPLATE_INSTANCE`':
                        $stmt->bindValue($identifier, $this->template_instance, PDO::PARAM_INT);
                        break;
                }
            }
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
        }

        try {
            $pk = $con->lastInsertId();
        } catch (Exception $e) {
            throw new PropelException('Unable to get autoincrement id.', $e);
        }
        $this->setId($pk);

        $this->setNew(false);
    }

    /**
     * Update the row in the database.
     *
     * @param PropelPDO $con
     *
     * @see        doSave()
     */
    protected function doUpdate(PropelPDO $con)
    {
        $selectCriteria = $this->buildPkeyCriteria();
        $valuesCriteria = $this->buildCriteria();
        BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
    }

    /**
     * Array of ValidationFailed objects.
     * @var        array ValidationFailed[]
     */
    protected $validationFailures = array();

    /**
     * Gets any ValidationFailed objects that resulted from last call to validate().
     *
     *
     * @return array ValidationFailed[]
     * @see        validate()
     */
    public function getValidationFailures()
    {
        return $this->validationFailures;
    }

    /**
     * Validates the objects modified field values and all objects related to this table.
     *
     * If $columns is either a column name or an array of column names
     * only those columns are validated.
     *
     * @param mixed $columns Column name or an array of column names.
     * @return boolean Whether all columns pass validation.
     * @see        doValidate()
     * @see        getValidationFailures()
     */
    public function validate($columns = null)
    {
        $res = $this->doValidate($columns);
        if ($res === true) {
            $this->validationFailures = array();

            return true;
        } else {
            $this->validationFailures = $res;

            return false;
        }
    }

    /**
     * This function performs the validation work for complex object models.
     *
     * In addition to checking the current object, all related objects will
     * also be validated.  If all pass then <code>true</code> is returned; otherwise
     * an aggreagated array of ValidationFailed objects will be returned.
     *
     * @param array $columns Array of column names to validate.
     * @return mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
     */
    protected function doValidate($columns = null)
    {
        if (!$this->alreadyInValidation) {
            $this->alreadyInValidation = true;
            $retval = null;

            $failureMap = array();


            // We call the validate method on the following object(s) if they
            // were passed to this object by their coresponding set
            // method.  This object relates to these object(s) by a
            // foreign key reference.

            if ($this->aPersonRelatedByApproverPersonId !== null) {
                if (!$this->aPersonRelatedByApproverPersonId->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aPersonRelatedByApproverPersonId->getValidationFailures());
                }
            }

            if ($this->aDeliveryRelatedByDeliveryId !== null) {
                if (!$this->aDeliveryRelatedByDeliveryId->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aDeliveryRelatedByDeliveryId->getValidationFailures());
                }
            }

            if ($this->aPersonRelatedByReviewerPersonId !== null) {
                if (!$this->aPersonRelatedByReviewerPersonId->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aPersonRelatedByReviewerPersonId->getValidationFailures());
                }
            }

            if ($this->aPersonRelatedByUploaderPersonId !== null) {
                if (!$this->aPersonRelatedByUploaderPersonId->validate($columns)) {
                    $failureMap = array_merge($failureMap, $this->aPersonRelatedByUploaderPersonId->getValidationFailures());
                }
            }


            if (($retval = RevisionPeer::doValidate($this, $columns)) !== true) {
                $failureMap = array_merge($failureMap, $retval);
            }


                if ($this->collDeliveriesRelatedByCurrentRevisionId !== null) {
                    foreach ($this->collDeliveriesRelatedByCurrentRevisionId as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }

                if ($this->collDocuments !== null) {
                    foreach ($this->collDocuments as $referrerFK) {
                        if (!$referrerFK->validate($columns)) {
                            $failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
                        }
                    }
                }


            $this->alreadyInValidation = false;
        }

        return (!empty($failureMap) ? $failureMap : true);
    }

    /**
     * Retrieves a field from the object by name passed in as a string.
     *
     * @param string $name name
     * @param string $type The type of fieldname the $name is of:
     *               one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *               BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *               Defaults to BasePeer::TYPE_PHPNAME
     * @return mixed Value of field.
     */
    public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = RevisionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
        $field = $this->getByPosition($pos);

        return $field;
    }

    /**
     * Retrieves a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @return mixed Value of field at $pos
     */
    public function getByPosition($pos)
    {
        switch ($pos) {
            case 0:
                return $this->getId();
                break;
            case 1:
                return $this->getDeliveryId();
                break;
            case 2:
                return $this->getOrderNr();
                break;
            case 3:
                return $this->getRevisionNr();
                break;
            case 4:
                return $this->getUploaderPersonId();
                break;
            case 5:
                return $this->getReviewerPersonId();
                break;
            case 6:
                return $this->getApproverPersonId();
                break;
            case 7:
                return $this->getUploadDate();
                break;
            case 8:
                return $this->getReviewDate();
                break;
            case 9:
                return $this->getApprovalDate();
                break;
            case 10:
                return $this->getUploadComment();
                break;
            case 11:
                return $this->getReviewComment();
                break;
            case 12:
                return $this->getApprovalComment();
                break;
            case 13:
                return $this->getOriginalDocument();
                break;
            case 14:
                return $this->getAutogeneratedDate();
                break;
            case 15:
                return $this->getTemplate();
                break;
            case 16:
                return $this->getTemplateInstance();
                break;
            default:
                return null;
                break;
        } // switch()
    }

    /**
     * Exports the object as an array.
     *
     * You can specify the key type of the array by passing one of the class
     * type constants.
     *
     * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                    Defaults to BasePeer::TYPE_PHPNAME.
     * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to true.
     * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
     * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
     *
     * @return array an associative array containing the field names (as keys) and field values
     */
    public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
    {
        if (isset($alreadyDumpedObjects['Revision'][$this->getPrimaryKey()])) {
            return '*RECURSION*';
        }
        $alreadyDumpedObjects['Revision'][$this->getPrimaryKey()] = true;
        $keys = RevisionPeer::getFieldNames($keyType);
        $result = array(
            $keys[0] => $this->getId(),
            $keys[1] => $this->getDeliveryId(),
            $keys[2] => $this->getOrderNr(),
            $keys[3] => $this->getRevisionNr(),
            $keys[4] => $this->getUploaderPersonId(),
            $keys[5] => $this->getReviewerPersonId(),
            $keys[6] => $this->getApproverPersonId(),
            $keys[7] => $this->getUploadDate(),
            $keys[8] => $this->getReviewDate(),
            $keys[9] => $this->getApprovalDate(),
            $keys[10] => $this->getUploadComment(),
            $keys[11] => $this->getReviewComment(),
            $keys[12] => $this->getApprovalComment(),
            $keys[13] => $this->getOriginalDocument(),
            $keys[14] => $this->getAutogeneratedDate(),
            $keys[15] => $this->getTemplate(),
            $keys[16] => $this->getTemplateInstance(),
        );
        if ($includeForeignObjects) {
            if (null !== $this->aPersonRelatedByApproverPersonId) {
                $result['PersonRelatedByApproverPersonId'] = $this->aPersonRelatedByApproverPersonId->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aDeliveryRelatedByDeliveryId) {
                $result['DeliveryRelatedByDeliveryId'] = $this->aDeliveryRelatedByDeliveryId->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aPersonRelatedByReviewerPersonId) {
                $result['PersonRelatedByReviewerPersonId'] = $this->aPersonRelatedByReviewerPersonId->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->aPersonRelatedByUploaderPersonId) {
                $result['PersonRelatedByUploaderPersonId'] = $this->aPersonRelatedByUploaderPersonId->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
            }
            if (null !== $this->collDeliveriesRelatedByCurrentRevisionId) {
                $result['DeliveriesRelatedByCurrentRevisionId'] = $this->collDeliveriesRelatedByCurrentRevisionId->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
            if (null !== $this->collDocuments) {
                $result['Documents'] = $this->collDocuments->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
            }
        }

        return $result;
    }

    /**
     * Sets a field from the object by name passed in as a string.
     *
     * @param string $name peer name
     * @param mixed $value field value
     * @param string $type The type of fieldname the $name is of:
     *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
     *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     *                     Defaults to BasePeer::TYPE_PHPNAME
     * @return void
     */
    public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
    {
        $pos = RevisionPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);

        $this->setByPosition($pos, $value);
    }

    /**
     * Sets a field from the object by Position as specified in the xml schema.
     * Zero-based.
     *
     * @param int $pos position in xml schema
     * @param mixed $value field value
     * @return void
     */
    public function setByPosition($pos, $value)
    {
        switch ($pos) {
            case 0:
                $this->setId($value);
                break;
            case 1:
                $this->setDeliveryId($value);
                break;
            case 2:
                $this->setOrderNr($value);
                break;
            case 3:
                $this->setRevisionNr($value);
                break;
            case 4:
                $this->setUploaderPersonId($value);
                break;
            case 5:
                $this->setReviewerPersonId($value);
                break;
            case 6:
                $this->setApproverPersonId($value);
                break;
            case 7:
                $this->setUploadDate($value);
                break;
            case 8:
                $this->setReviewDate($value);
                break;
            case 9:
                $this->setApprovalDate($value);
                break;
            case 10:
                $this->setUploadComment($value);
                break;
            case 11:
                $this->setReviewComment($value);
                break;
            case 12:
                $this->setApprovalComment($value);
                break;
            case 13:
                $this->setOriginalDocument($value);
                break;
            case 14:
                $this->setAutogeneratedDate($value);
                break;
            case 15:
                $this->setTemplate($value);
                break;
            case 16:
                $this->setTemplateInstance($value);
                break;
        } // switch()
    }

    /**
     * Populates the object using an array.
     *
     * This is particularly useful when populating an object from one of the
     * request arrays (e.g. $_POST).  This method goes through the column
     * names, checking to see whether a matching key exists in populated
     * array. If so the setByName() method is called for that column.
     *
     * You can specify the key type of the array by additionally passing one
     * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
     * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
     * The default key type is the column's BasePeer::TYPE_PHPNAME
     *
     * @param array  $arr     An array to populate the object from.
     * @param string $keyType The type of keys the array uses.
     * @return void
     */
    public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
    {
        $keys = RevisionPeer::getFieldNames($keyType);

        if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
        if (array_key_exists($keys[1], $arr)) $this->setDeliveryId($arr[$keys[1]]);
        if (array_key_exists($keys[2], $arr)) $this->setOrderNr($arr[$keys[2]]);
        if (array_key_exists($keys[3], $arr)) $this->setRevisionNr($arr[$keys[3]]);
        if (array_key_exists($keys[4], $arr)) $this->setUploaderPersonId($arr[$keys[4]]);
        if (array_key_exists($keys[5], $arr)) $this->setReviewerPersonId($arr[$keys[5]]);
        if (array_key_exists($keys[6], $arr)) $this->setApproverPersonId($arr[$keys[6]]);
        if (array_key_exists($keys[7], $arr)) $this->setUploadDate($arr[$keys[7]]);
        if (array_key_exists($keys[8], $arr)) $this->setReviewDate($arr[$keys[8]]);
        if (array_key_exists($keys[9], $arr)) $this->setApprovalDate($arr[$keys[9]]);
        if (array_key_exists($keys[10], $arr)) $this->setUploadComment($arr[$keys[10]]);
        if (array_key_exists($keys[11], $arr)) $this->setReviewComment($arr[$keys[11]]);
        if (array_key_exists($keys[12], $arr)) $this->setApprovalComment($arr[$keys[12]]);
        if (array_key_exists($keys[13], $arr)) $this->setOriginalDocument($arr[$keys[13]]);
        if (array_key_exists($keys[14], $arr)) $this->setAutogeneratedDate($arr[$keys[14]]);
        if (array_key_exists($keys[15], $arr)) $this->setTemplate($arr[$keys[15]]);
        if (array_key_exists($keys[16], $arr)) $this->setTemplateInstance($arr[$keys[16]]);
    }

    /**
     * Build a Criteria object containing the values of all modified columns in this object.
     *
     * @return Criteria The Criteria object containing all modified values.
     */
    public function buildCriteria()
    {
        $criteria = new Criteria(RevisionPeer::DATABASE_NAME);

        if ($this->isColumnModified(RevisionPeer::ID)) $criteria->add(RevisionPeer::ID, $this->id);
        if ($this->isColumnModified(RevisionPeer::DELIVERY_ID)) $criteria->add(RevisionPeer::DELIVERY_ID, $this->delivery_id);
        if ($this->isColumnModified(RevisionPeer::ORDER_NR)) $criteria->add(RevisionPeer::ORDER_NR, $this->order_nr);
        if ($this->isColumnModified(RevisionPeer::REVISION_NR)) $criteria->add(RevisionPeer::REVISION_NR, $this->revision_nr);
        if ($this->isColumnModified(RevisionPeer::UPLOADER_PERSON_ID)) $criteria->add(RevisionPeer::UPLOADER_PERSON_ID, $this->uploader_person_id);
        if ($this->isColumnModified(RevisionPeer::REVIEWER_PERSON_ID)) $criteria->add(RevisionPeer::REVIEWER_PERSON_ID, $this->reviewer_person_id);
        if ($this->isColumnModified(RevisionPeer::APPROVER_PERSON_ID)) $criteria->add(RevisionPeer::APPROVER_PERSON_ID, $this->approver_person_id);
        if ($this->isColumnModified(RevisionPeer::UPLOAD_DATE)) $criteria->add(RevisionPeer::UPLOAD_DATE, $this->upload_date);
        if ($this->isColumnModified(RevisionPeer::REVIEW_DATE)) $criteria->add(RevisionPeer::REVIEW_DATE, $this->review_date);
        if ($this->isColumnModified(RevisionPeer::APPROVAL_DATE)) $criteria->add(RevisionPeer::APPROVAL_DATE, $this->approval_date);
        if ($this->isColumnModified(RevisionPeer::UPLOAD_COMMENT)) $criteria->add(RevisionPeer::UPLOAD_COMMENT, $this->upload_comment);
        if ($this->isColumnModified(RevisionPeer::REVIEW_COMMENT)) $criteria->add(RevisionPeer::REVIEW_COMMENT, $this->review_comment);
        if ($this->isColumnModified(RevisionPeer::APPROVAL_COMMENT)) $criteria->add(RevisionPeer::APPROVAL_COMMENT, $this->approval_comment);
        if ($this->isColumnModified(RevisionPeer::ORIGINAL_DOCUMENT)) $criteria->add(RevisionPeer::ORIGINAL_DOCUMENT, $this->original_document);
        if ($this->isColumnModified(RevisionPeer::AUTOGENERATED_DATE)) $criteria->add(RevisionPeer::AUTOGENERATED_DATE, $this->autogenerated_date);
        if ($this->isColumnModified(RevisionPeer::TEMPLATE)) $criteria->add(RevisionPeer::TEMPLATE, $this->template);
        if ($this->isColumnModified(RevisionPeer::TEMPLATE_INSTANCE)) $criteria->add(RevisionPeer::TEMPLATE_INSTANCE, $this->template_instance);

        return $criteria;
    }

    /**
     * Builds a Criteria object containing the primary key for this object.
     *
     * Unlike buildCriteria() this method includes the primary key values regardless
     * of whether or not they have been modified.
     *
     * @return Criteria The Criteria object containing value(s) for primary key(s).
     */
    public function buildPkeyCriteria()
    {
        $criteria = new Criteria(RevisionPeer::DATABASE_NAME);
        $criteria->add(RevisionPeer::ID, $this->id);

        return $criteria;
    }

    /**
     * Returns the primary key for this object (row).
     * @return int
     */
    public function getPrimaryKey()
    {
        return $this->getId();
    }

    /**
     * Generic method to set the primary key (id column).
     *
     * @param  int $key Primary key.
     * @return void
     */
    public function setPrimaryKey($key)
    {
        $this->setId($key);
    }

    /**
     * Returns true if the primary key for this object is null.
     * @return boolean
     */
    public function isPrimaryKeyNull()
    {

        return null === $this->getId();
    }

    /**
     * Sets contents of passed object to values from current object.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param object $copyObj An object of Revision (or compatible) type.
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @param boolean $makeNew Whether to reset autoincrement PKs and make the object new.
     * @throws PropelException
     */
    public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
    {
        $copyObj->setDeliveryId($this->getDeliveryId());
        $copyObj->setOrderNr($this->getOrderNr());
        $copyObj->setRevisionNr($this->getRevisionNr());
        $copyObj->setUploaderPersonId($this->getUploaderPersonId());
        $copyObj->setReviewerPersonId($this->getReviewerPersonId());
        $copyObj->setApproverPersonId($this->getApproverPersonId());
        $copyObj->setUploadDate($this->getUploadDate());
        $copyObj->setReviewDate($this->getReviewDate());
        $copyObj->setApprovalDate($this->getApprovalDate());
        $copyObj->setUploadComment($this->getUploadComment());
        $copyObj->setReviewComment($this->getReviewComment());
        $copyObj->setApprovalComment($this->getApprovalComment());
        $copyObj->setOriginalDocument($this->getOriginalDocument());
        $copyObj->setAutogeneratedDate($this->getAutogeneratedDate());
        $copyObj->setTemplate($this->getTemplate());
        $copyObj->setTemplateInstance($this->getTemplateInstance());

        if ($deepCopy && !$this->startCopy) {
            // important: temporarily setNew(false) because this affects the behavior of
            // the getter/setter methods for fkey referrer objects.
            $copyObj->setNew(false);
            // store object hash to prevent cycle
            $this->startCopy = true;

            foreach ($this->getDeliveriesRelatedByCurrentRevisionId() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addDeliveryRelatedByCurrentRevisionId($relObj->copy($deepCopy));
                }
            }

            foreach ($this->getDocuments() as $relObj) {
                if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
                    $copyObj->addDocument($relObj->copy($deepCopy));
                }
            }

            //unflag object copy
            $this->startCopy = false;
        } // if ($deepCopy)

        if ($makeNew) {
            $copyObj->setNew(true);
            $copyObj->setId(NULL); // this is a auto-increment column, so set to default value
        }
    }

    /**
     * Makes a copy of this object that will be inserted as a new row in table when saved.
     * It creates a new object filling in the simple attributes, but skipping any primary
     * keys that are defined for the table.
     *
     * If desired, this method can also make copies of all associated (fkey referrers)
     * objects.
     *
     * @param boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
     * @return Revision Clone of current object.
     * @throws PropelException
     */
    public function copy($deepCopy = false)
    {
        // we use get_class(), because this might be a subclass
        $clazz = get_class($this);
        $copyObj = new $clazz();
        $this->copyInto($copyObj, $deepCopy);

        return $copyObj;
    }

    /**
     * Returns a peer instance associated with this om.
     *
     * Since Peer classes are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     *
     * @return RevisionPeer
     */
    public function getPeer()
    {
        if (self::$peer === null) {
            self::$peer = new RevisionPeer();
        }

        return self::$peer;
    }

    /**
     * Declares an association between this object and a Person object.
     *
     * @param             Person $v
     * @return Revision The current object (for fluent API support)
     * @throws PropelException
     */
    public function setPersonRelatedByApproverPersonId(Person $v = null)
    {
        if ($v === null) {
            $this->setApproverPersonId(NULL);
        } else {
            $this->setApproverPersonId($v->getId());
        }

        $this->aPersonRelatedByApproverPersonId = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Person object, it will not be re-added.
        if ($v !== null) {
            $v->addRevisionRelatedByApproverPersonId($this);
        }


        return $this;
    }


    /**
     * Get the associated Person object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Person The associated Person object.
     * @throws PropelException
     */
    public function getPersonRelatedByApproverPersonId(PropelPDO $con = null)
    {
        if ($this->aPersonRelatedByApproverPersonId === null && ($this->approver_person_id !== null)) {
            $this->aPersonRelatedByApproverPersonId = PersonQuery::create()->findPk($this->approver_person_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aPersonRelatedByApproverPersonId->addRevisionsRelatedByApproverPersonId($this);
             */
        }

        return $this->aPersonRelatedByApproverPersonId;
    }

    /**
     * Declares an association between this object and a Delivery object.
     *
     * @param             Delivery $v
     * @return Revision The current object (for fluent API support)
     * @throws PropelException
     */
    public function setDeliveryRelatedByDeliveryId(Delivery $v = null)
    {
        if ($v === null) {
            $this->setDeliveryId(NULL);
        } else {
            $this->setDeliveryId($v->getId());
        }

        $this->aDeliveryRelatedByDeliveryId = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Delivery object, it will not be re-added.
        if ($v !== null) {
            $v->addRevisionRelatedByDeliveryId($this);
        }


        return $this;
    }


    /**
     * Get the associated Delivery object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Delivery The associated Delivery object.
     * @throws PropelException
     */
    public function getDeliveryRelatedByDeliveryId(PropelPDO $con = null)
    {
        if ($this->aDeliveryRelatedByDeliveryId === null && ($this->delivery_id !== null)) {
            $this->aDeliveryRelatedByDeliveryId = DeliveryQuery::create()->findPk($this->delivery_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aDeliveryRelatedByDeliveryId->addRevisionsRelatedByDeliveryId($this);
             */
        }

        return $this->aDeliveryRelatedByDeliveryId;
    }

    /**
     * Declares an association between this object and a Person object.
     *
     * @param             Person $v
     * @return Revision The current object (for fluent API support)
     * @throws PropelException
     */
    public function setPersonRelatedByReviewerPersonId(Person $v = null)
    {
        if ($v === null) {
            $this->setReviewerPersonId(NULL);
        } else {
            $this->setReviewerPersonId($v->getId());
        }

        $this->aPersonRelatedByReviewerPersonId = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Person object, it will not be re-added.
        if ($v !== null) {
            $v->addRevisionRelatedByReviewerPersonId($this);
        }


        return $this;
    }


    /**
     * Get the associated Person object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Person The associated Person object.
     * @throws PropelException
     */
    public function getPersonRelatedByReviewerPersonId(PropelPDO $con = null)
    {
        if ($this->aPersonRelatedByReviewerPersonId === null && ($this->reviewer_person_id !== null)) {
            $this->aPersonRelatedByReviewerPersonId = PersonQuery::create()->findPk($this->reviewer_person_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aPersonRelatedByReviewerPersonId->addRevisionsRelatedByReviewerPersonId($this);
             */
        }

        return $this->aPersonRelatedByReviewerPersonId;
    }

    /**
     * Declares an association between this object and a Person object.
     *
     * @param             Person $v
     * @return Revision The current object (for fluent API support)
     * @throws PropelException
     */
    public function setPersonRelatedByUploaderPersonId(Person $v = null)
    {
        if ($v === null) {
            $this->setUploaderPersonId(NULL);
        } else {
            $this->setUploaderPersonId($v->getId());
        }

        $this->aPersonRelatedByUploaderPersonId = $v;

        // Add binding for other direction of this n:n relationship.
        // If this object has already been added to the Person object, it will not be re-added.
        if ($v !== null) {
            $v->addRevisionRelatedByUploaderPersonId($this);
        }


        return $this;
    }


    /**
     * Get the associated Person object
     *
     * @param PropelPDO $con Optional Connection object.
     * @return Person The associated Person object.
     * @throws PropelException
     */
    public function getPersonRelatedByUploaderPersonId(PropelPDO $con = null)
    {
        if ($this->aPersonRelatedByUploaderPersonId === null && ($this->uploader_person_id !== null)) {
            $this->aPersonRelatedByUploaderPersonId = PersonQuery::create()->findPk($this->uploader_person_id, $con);
            /* The following can be used additionally to
                guarantee the related object contains a reference
                to this object.  This level of coupling may, however, be
                undesirable since it could result in an only partially populated collection
                in the referenced object.
                $this->aPersonRelatedByUploaderPersonId->addRevisionsRelatedByUploaderPersonId($this);
             */
        }

        return $this->aPersonRelatedByUploaderPersonId;
    }


    /**
     * Initializes a collection based on the name of a relation.
     * Avoids crafting an 'init[$relationName]s' method name
     * that wouldn't work when StandardEnglishPluralizer is used.
     *
     * @param string $relationName The name of the relation to initialize
     * @return void
     */
    public function initRelation($relationName)
    {
        if ('DeliveryRelatedByCurrentRevisionId' == $relationName) {
            $this->initDeliveriesRelatedByCurrentRevisionId();
        }
        if ('Document' == $relationName) {
            $this->initDocuments();
        }
    }

    /**
     * Clears out the collDeliveriesRelatedByCurrentRevisionId collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addDeliveriesRelatedByCurrentRevisionId()
     */
    public function clearDeliveriesRelatedByCurrentRevisionId()
    {
        $this->collDeliveriesRelatedByCurrentRevisionId = null; // important to set this to null since that means it is uninitialized
        $this->collDeliveriesRelatedByCurrentRevisionIdPartial = null;
    }

    /**
     * reset is the collDeliveriesRelatedByCurrentRevisionId collection loaded partially
     *
     * @return void
     */
    public function resetPartialDeliveriesRelatedByCurrentRevisionId($v = true)
    {
        $this->collDeliveriesRelatedByCurrentRevisionIdPartial = $v;
    }

    /**
     * Initializes the collDeliveriesRelatedByCurrentRevisionId collection.
     *
     * By default this just sets the collDeliveriesRelatedByCurrentRevisionId collection to an empty array (like clearcollDeliveriesRelatedByCurrentRevisionId());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initDeliveriesRelatedByCurrentRevisionId($overrideExisting = true)
    {
        if (null !== $this->collDeliveriesRelatedByCurrentRevisionId && !$overrideExisting) {
            return;
        }
        $this->collDeliveriesRelatedByCurrentRevisionId = new PropelObjectCollection();
        $this->collDeliveriesRelatedByCurrentRevisionId->setModel('Delivery');
    }

    /**
     * Gets an array of Delivery objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Revision is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Delivery[] List of Delivery objects
     * @throws PropelException
     */
    public function getDeliveriesRelatedByCurrentRevisionId($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collDeliveriesRelatedByCurrentRevisionIdPartial && !$this->isNew();
        if (null === $this->collDeliveriesRelatedByCurrentRevisionId || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collDeliveriesRelatedByCurrentRevisionId) {
                // return empty collection
                $this->initDeliveriesRelatedByCurrentRevisionId();
            } else {
                $collDeliveriesRelatedByCurrentRevisionId = DeliveryQuery::create(null, $criteria)
                    ->filterByRevisionRelatedByCurrentRevisionId($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collDeliveriesRelatedByCurrentRevisionIdPartial && count($collDeliveriesRelatedByCurrentRevisionId)) {
                      $this->initDeliveriesRelatedByCurrentRevisionId(false);

                      foreach($collDeliveriesRelatedByCurrentRevisionId as $obj) {
                        if (false == $this->collDeliveriesRelatedByCurrentRevisionId->contains($obj)) {
                          $this->collDeliveriesRelatedByCurrentRevisionId->append($obj);
                        }
                      }

                      $this->collDeliveriesRelatedByCurrentRevisionIdPartial = true;
                    }

                    return $collDeliveriesRelatedByCurrentRevisionId;
                }

                if($partial && $this->collDeliveriesRelatedByCurrentRevisionId) {
                    foreach($this->collDeliveriesRelatedByCurrentRevisionId as $obj) {
                        if($obj->isNew()) {
                            $collDeliveriesRelatedByCurrentRevisionId[] = $obj;
                        }
                    }
                }

                $this->collDeliveriesRelatedByCurrentRevisionId = $collDeliveriesRelatedByCurrentRevisionId;
                $this->collDeliveriesRelatedByCurrentRevisionIdPartial = false;
            }
        }

        return $this->collDeliveriesRelatedByCurrentRevisionId;
    }

    /**
     * Sets a collection of DeliveryRelatedByCurrentRevisionId objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $deliveriesRelatedByCurrentRevisionId A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setDeliveriesRelatedByCurrentRevisionId(PropelCollection $deliveriesRelatedByCurrentRevisionId, PropelPDO $con = null)
    {
        $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion = $this->getDeliveriesRelatedByCurrentRevisionId(new Criteria(), $con)->diff($deliveriesRelatedByCurrentRevisionId);

        foreach ($this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion as $deliveryRelatedByCurrentRevisionIdRemoved) {
            $deliveryRelatedByCurrentRevisionIdRemoved->setRevisionRelatedByCurrentRevisionId(null);
        }

        $this->collDeliveriesRelatedByCurrentRevisionId = null;
        foreach ($deliveriesRelatedByCurrentRevisionId as $deliveryRelatedByCurrentRevisionId) {
            $this->addDeliveryRelatedByCurrentRevisionId($deliveryRelatedByCurrentRevisionId);
        }

        $this->collDeliveriesRelatedByCurrentRevisionId = $deliveriesRelatedByCurrentRevisionId;
        $this->collDeliveriesRelatedByCurrentRevisionIdPartial = false;
    }

    /**
     * Returns the number of related Delivery objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Delivery objects.
     * @throws PropelException
     */
    public function countDeliveriesRelatedByCurrentRevisionId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collDeliveriesRelatedByCurrentRevisionIdPartial && !$this->isNew();
        if (null === $this->collDeliveriesRelatedByCurrentRevisionId || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collDeliveriesRelatedByCurrentRevisionId) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getDeliveriesRelatedByCurrentRevisionId());
                }
                $query = DeliveryQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByRevisionRelatedByCurrentRevisionId($this)
                    ->count($con);
            }
        } else {
            return count($this->collDeliveriesRelatedByCurrentRevisionId);
        }
    }

    /**
     * Method called to associate a Delivery object to this object
     * through the Delivery foreign key attribute.
     *
     * @param    Delivery $l Delivery
     * @return Revision The current object (for fluent API support)
     */
    public function addDeliveryRelatedByCurrentRevisionId(Delivery $l)
    {
        if ($this->collDeliveriesRelatedByCurrentRevisionId === null) {
            $this->initDeliveriesRelatedByCurrentRevisionId();
            $this->collDeliveriesRelatedByCurrentRevisionIdPartial = true;
        }
        if (!in_array($l, $this->collDeliveriesRelatedByCurrentRevisionId->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddDeliveryRelatedByCurrentRevisionId($l);
        }

        return $this;
    }

    /**
     * @param	DeliveryRelatedByCurrentRevisionId $deliveryRelatedByCurrentRevisionId The deliveryRelatedByCurrentRevisionId object to add.
     */
    protected function doAddDeliveryRelatedByCurrentRevisionId($deliveryRelatedByCurrentRevisionId)
    {
        $this->collDeliveriesRelatedByCurrentRevisionId[]= $deliveryRelatedByCurrentRevisionId;
        $deliveryRelatedByCurrentRevisionId->setRevisionRelatedByCurrentRevisionId($this);
    }

    /**
     * @param	DeliveryRelatedByCurrentRevisionId $deliveryRelatedByCurrentRevisionId The deliveryRelatedByCurrentRevisionId object to remove.
     */
    public function removeDeliveryRelatedByCurrentRevisionId($deliveryRelatedByCurrentRevisionId)
    {
        if ($this->getDeliveriesRelatedByCurrentRevisionId()->contains($deliveryRelatedByCurrentRevisionId)) {
            $this->collDeliveriesRelatedByCurrentRevisionId->remove($this->collDeliveriesRelatedByCurrentRevisionId->search($deliveryRelatedByCurrentRevisionId));
            if (null === $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion) {
                $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion = clone $this->collDeliveriesRelatedByCurrentRevisionId;
                $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion->clear();
            }
            $this->deliveriesRelatedByCurrentRevisionIdScheduledForDeletion[]= $deliveryRelatedByCurrentRevisionId;
            $deliveryRelatedByCurrentRevisionId->setRevisionRelatedByCurrentRevisionId(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Revision is new, it will return
     * an empty collection; or if this Revision has previously
     * been saved, it will retrieve related DeliveriesRelatedByCurrentRevisionId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Revision.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Delivery[] List of Delivery objects
     */
    public function getDeliveriesRelatedByCurrentRevisionIdJoinProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DeliveryQuery::create(null, $criteria);
        $query->joinWith('Profile', $join_behavior);

        return $this->getDeliveriesRelatedByCurrentRevisionId($query, $con);
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Revision is new, it will return
     * an empty collection; or if this Revision has previously
     * been saved, it will retrieve related DeliveriesRelatedByCurrentRevisionId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Revision.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Delivery[] List of Delivery objects
     */
    public function getDeliveriesRelatedByCurrentRevisionIdJoinSnapshot($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DeliveryQuery::create(null, $criteria);
        $query->joinWith('Snapshot', $join_behavior);

        return $this->getDeliveriesRelatedByCurrentRevisionId($query, $con);
    }

    /**
     * Clears out the collDocuments collection
     *
     * This does not modify the database; however, it will remove any associated objects, causing
     * them to be refetched by subsequent calls to accessor method.
     *
     * @return void
     * @see        addDocuments()
     */
    public function clearDocuments()
    {
        $this->collDocuments = null; // important to set this to null since that means it is uninitialized
        $this->collDocumentsPartial = null;
    }

    /**
     * reset is the collDocuments collection loaded partially
     *
     * @return void
     */
    public function resetPartialDocuments($v = true)
    {
        $this->collDocumentsPartial = $v;
    }

    /**
     * Initializes the collDocuments collection.
     *
     * By default this just sets the collDocuments collection to an empty array (like clearcollDocuments());
     * however, you may wish to override this method in your stub class to provide setting appropriate
     * to your application -- for example, setting the initial array to the values stored in database.
     *
     * @param boolean $overrideExisting If set to true, the method call initializes
     *                                        the collection even if it is not empty
     *
     * @return void
     */
    public function initDocuments($overrideExisting = true)
    {
        if (null !== $this->collDocuments && !$overrideExisting) {
            return;
        }
        $this->collDocuments = new PropelObjectCollection();
        $this->collDocuments->setModel('Document');
    }

    /**
     * Gets an array of Document objects which contain a foreign key that references this object.
     *
     * If the $criteria is not null, it is used to always fetch the results from the database.
     * Otherwise the results are fetched from the database the first time, then cached.
     * Next time the same method is called without $criteria, the cached collection is returned.
     * If this Revision is new, it will return
     * an empty collection or the current collection; the criteria is ignored on a new object.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @return PropelObjectCollection|Document[] List of Document objects
     * @throws PropelException
     */
    public function getDocuments($criteria = null, PropelPDO $con = null)
    {
        $partial = $this->collDocumentsPartial && !$this->isNew();
        if (null === $this->collDocuments || null !== $criteria  || $partial) {
            if ($this->isNew() && null === $this->collDocuments) {
                // return empty collection
                $this->initDocuments();
            } else {
                $collDocuments = DocumentQuery::create(null, $criteria)
                    ->filterByRevision($this)
                    ->find($con);
                if (null !== $criteria) {
                    if (false !== $this->collDocumentsPartial && count($collDocuments)) {
                      $this->initDocuments(false);

                      foreach($collDocuments as $obj) {
                        if (false == $this->collDocuments->contains($obj)) {
                          $this->collDocuments->append($obj);
                        }
                      }

                      $this->collDocumentsPartial = true;
                    }

                    return $collDocuments;
                }

                if($partial && $this->collDocuments) {
                    foreach($this->collDocuments as $obj) {
                        if($obj->isNew()) {
                            $collDocuments[] = $obj;
                        }
                    }
                }

                $this->collDocuments = $collDocuments;
                $this->collDocumentsPartial = false;
            }
        }

        return $this->collDocuments;
    }

    /**
     * Sets a collection of Document objects related by a one-to-many relationship
     * to the current object.
     * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
     * and new objects from the given Propel collection.
     *
     * @param PropelCollection $documents A Propel collection.
     * @param PropelPDO $con Optional connection object
     */
    public function setDocuments(PropelCollection $documents, PropelPDO $con = null)
    {
        $this->documentsScheduledForDeletion = $this->getDocuments(new Criteria(), $con)->diff($documents);

        foreach ($this->documentsScheduledForDeletion as $documentRemoved) {
            $documentRemoved->setRevision(null);
        }

        $this->collDocuments = null;
        foreach ($documents as $document) {
            $this->addDocument($document);
        }

        $this->collDocuments = $documents;
        $this->collDocumentsPartial = false;
    }

    /**
     * Returns the number of related Document objects.
     *
     * @param Criteria $criteria
     * @param boolean $distinct
     * @param PropelPDO $con
     * @return int             Count of related Document objects.
     * @throws PropelException
     */
    public function countDocuments(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
    {
        $partial = $this->collDocumentsPartial && !$this->isNew();
        if (null === $this->collDocuments || null !== $criteria || $partial) {
            if ($this->isNew() && null === $this->collDocuments) {
                return 0;
            } else {
                if($partial && !$criteria) {
                    return count($this->getDocuments());
                }
                $query = DocumentQuery::create(null, $criteria);
                if ($distinct) {
                    $query->distinct();
                }

                return $query
                    ->filterByRevision($this)
                    ->count($con);
            }
        } else {
            return count($this->collDocuments);
        }
    }

    /**
     * Method called to associate a Document object to this object
     * through the Document foreign key attribute.
     *
     * @param    Document $l Document
     * @return Revision The current object (for fluent API support)
     */
    public function addDocument(Document $l)
    {
        if ($this->collDocuments === null) {
            $this->initDocuments();
            $this->collDocumentsPartial = true;
        }
        if (!in_array($l, $this->collDocuments->getArrayCopy(), true)) { // only add it if the **same** object is not already associated
            $this->doAddDocument($l);
        }

        return $this;
    }

    /**
     * @param	Document $document The document object to add.
     */
    protected function doAddDocument($document)
    {
        $this->collDocuments[]= $document;
        $document->setRevision($this);
    }

    /**
     * @param	Document $document The document object to remove.
     */
    public function removeDocument($document)
    {
        if ($this->getDocuments()->contains($document)) {
            $this->collDocuments->remove($this->collDocuments->search($document));
            if (null === $this->documentsScheduledForDeletion) {
                $this->documentsScheduledForDeletion = clone $this->collDocuments;
                $this->documentsScheduledForDeletion->clear();
            }
            $this->documentsScheduledForDeletion[]= $document;
            $document->setRevision(null);
        }
    }


    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Revision is new, it will return
     * an empty collection; or if this Revision has previously
     * been saved, it will retrieve related Documents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Revision.
     *
     * @param Criteria $criteria optional Criteria object to narrow the query
     * @param PropelPDO $con optional connection object
     * @param string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
     * @return PropelObjectCollection|Document[] List of Document objects
     */
    public function getDocumentsJoinFileExtension($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
    {
        $query = DocumentQuery::create(null, $criteria);
        $query->joinWith('FileExtension', $join_behavior);

        return $this->getDocuments($query, $con);
    }

    /**
     * Clears the current object and sets all attributes to their default values
     */
    public function clear()
    {
        $this->id = null;
        $this->delivery_id = null;
        $this->order_nr = null;
        $this->revision_nr = null;
        $this->uploader_person_id = null;
        $this->reviewer_person_id = null;
        $this->approver_person_id = null;
        $this->upload_date = null;
        $this->review_date = null;
        $this->approval_date = null;
        $this->upload_comment = null;
        $this->review_comment = null;
        $this->approval_comment = null;
        $this->original_document = null;
        $this->autogenerated_date = null;
        $this->template = null;
        $this->template_instance = null;
        $this->alreadyInSave = false;
        $this->alreadyInValidation = false;
        $this->clearAllReferences();
        $this->resetModified();
        $this->setNew(true);
        $this->setDeleted(false);
    }

    /**
     * Resets all references to other model objects or collections of model objects.
     *
     * This method is a user-space workaround for PHP's inability to garbage collect
     * objects with circular references (even in PHP 5.3). This is currently necessary
     * when using Propel in certain daemon or large-volumne/high-memory operations.
     *
     * @param boolean $deep Whether to also clear the references on all referrer objects.
     */
    public function clearAllReferences($deep = false)
    {
        if ($deep) {
            if ($this->collDeliveriesRelatedByCurrentRevisionId) {
                foreach ($this->collDeliveriesRelatedByCurrentRevisionId as $o) {
                    $o->clearAllReferences($deep);
                }
            }
            if ($this->collDocuments) {
                foreach ($this->collDocuments as $o) {
                    $o->clearAllReferences($deep);
                }
            }
        } // if ($deep)

        if ($this->collDeliveriesRelatedByCurrentRevisionId instanceof PropelCollection) {
            $this->collDeliveriesRelatedByCurrentRevisionId->clearIterator();
        }
        $this->collDeliveriesRelatedByCurrentRevisionId = null;
        if ($this->collDocuments instanceof PropelCollection) {
            $this->collDocuments->clearIterator();
        }
        $this->collDocuments = null;
        $this->aPersonRelatedByApproverPersonId = null;
        $this->aDeliveryRelatedByDeliveryId = null;
        $this->aPersonRelatedByReviewerPersonId = null;
        $this->aPersonRelatedByUploaderPersonId = null;
    }

    /**
     * return the string representation of this object
     *
     * @return string
     */
    public function __toString()
    {
        return (string) $this->exportTo(RevisionPeer::DEFAULT_STRING_FORMAT);
    }

    /**
     * return true is the object is in saving state
     *
     * @return boolean
     */
    public function isAlreadyInSave()
    {
        return $this->alreadyInSave;
    }

    // sortable behavior

    /**
     * Wrap the getter for rank value
     *
     * @return    int
     */
    public function getRank()
    {
        return $this->order_nr;
    }

    /**
     * Wrap the setter for rank value
     *
     * @param     int
     * @return    Revision
     */
    public function setRank($v)
    {
        return $this->setOrderNr($v);
    }


    /**
     * Wrap the getter for scope value
     *
     * @return    int
     */
    public function getScopeValue()
    {
        return $this->delivery_id;
    }

    /**
     * Wrap the setter for scope value
     *
     * @param     int
     * @return    Revision
     */
    public function setScopeValue($v)
    {
        return $this->setDeliveryId($v);
    }

    /**
     * Check if the object is first in the list, i.e. if it has 1 for rank
     *
     * @return    boolean
     */
    public function isFirst()
    {
        return $this->getOrderNr() == 1;
    }

    /**
     * Check if the object is last in the list, i.e. if its rank is the highest rank
     *
     * @param     PropelPDO  $con      optional connection
     *
     * @return    boolean
     */
    public function isLast(PropelPDO $con = null)
    {
        return $this->getOrderNr() == RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con);
    }

    /**
     * Get the next item in the list, i.e. the one for which rank is immediately higher
     *
     * @param     PropelPDO  $con      optional connection
     *
     * @return    Revision
     */
    public function getNext(PropelPDO $con = null)
    {

        return RevisionQuery::create()->findOneByRank($this->getOrderNr() + 1, $this->getDeliveryId(), $con);
    }

    /**
     * Get the previous item in the list, i.e. the one for which rank is immediately lower
     *
     * @param     PropelPDO  $con      optional connection
     *
     * @return    Revision
     */
    public function getPrevious(PropelPDO $con = null)
    {

        return RevisionQuery::create()->findOneByRank($this->getOrderNr() - 1, $this->getDeliveryId(), $con);
    }

    /**
     * Insert at specified rank
     * The modifications are not persisted until the object is saved.
     *
     * @param     integer    $rank rank value
     * @param     PropelPDO  $con      optional connection
     *
     * @return    Revision the current object
     *
     * @throws    PropelException
     */
    public function insertAtRank($rank, PropelPDO $con = null)
    {
        $maxRank = RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con);
        if ($rank < 1 || $rank > $maxRank + 1) {
            throw new PropelException('Invalid rank ' . $rank);
        }
        // move the object in the list, at the given rank
        $this->setOrderNr($rank);
        if ($rank != $maxRank + 1) {
            // Keep the list modification query for the save() transaction
            $this->sortableQueries []= array(
                'callable'  => array(self::PEER, 'shiftRank'),
                'arguments' => array(1, $rank, null, $this->getDeliveryId())
            );
        }

        return $this;
    }

    /**
     * Insert in the last rank
     * The modifications are not persisted until the object is saved.
     *
     * @param PropelPDO $con optional connection
     *
     * @return    Revision the current object
     *
     * @throws    PropelException
     */
    public function insertAtBottom(PropelPDO $con = null)
    {
        $this->setOrderNr(RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con) + 1);

        return $this;
    }

    /**
     * Insert in the first rank
     * The modifications are not persisted until the object is saved.
     *
     * @return    Revision the current object
     */
    public function insertAtTop()
    {
        return $this->insertAtRank(1);
    }

    /**
     * Move the object to a new rank, and shifts the rank
     * Of the objects inbetween the old and new rank accordingly
     *
     * @param     integer   $newRank rank value
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     *
     * @throws    PropelException
     */
    public function moveToRank($newRank, PropelPDO $con = null)
    {
        if ($this->isNew()) {
            throw new PropelException('New objects cannot be moved. Please use insertAtRank() instead');
        }
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        if ($newRank < 1 || $newRank > RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con)) {
            throw new PropelException('Invalid rank ' . $newRank);
        }

        $oldRank = $this->getOrderNr();
        if ($oldRank == $newRank) {
            return $this;
        }

        $con->beginTransaction();
        try {
            // shift the objects between the old and the new rank
            $delta = ($oldRank < $newRank) ? -1 : 1;
            RevisionPeer::shiftRank($delta, min($oldRank, $newRank), max($oldRank, $newRank), $this->getDeliveryId(), $con);

            // move the object to its new rank
            $this->setOrderNr($newRank);
            $this->save($con);

            $con->commit();

            return $this;
        } catch (Exception $e) {
            $con->rollback();
            throw $e;
        }
    }

    /**
     * Exchange the rank of the object with the one passed as argument, and saves both objects
     *
     * @param     Revision $object
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     *
     * @throws Exception if the database cannot execute the two updates
     */
    public function swapWith($object, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        $con->beginTransaction();
        try {
            $oldScope = $this->getDeliveryId();
            $newScope = $object->getDeliveryId();
            if ($oldScope != $newScope) {
                $this->setDeliveryId($newScope);
                $object->setDeliveryId($oldScope);
            }
            $oldRank = $this->getOrderNr();
            $newRank = $object->getOrderNr();
            $this->setOrderNr($newRank);
            $this->save($con);
            $object->setOrderNr($oldRank);
            $object->save($con);
            $con->commit();

            return $this;
        } catch (Exception $e) {
            $con->rollback();
            throw $e;
        }
    }

    /**
     * Move the object higher in the list, i.e. exchanges its rank with the one of the previous object
     *
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     */
    public function moveUp(PropelPDO $con = null)
    {
        if ($this->isFirst()) {
            return $this;
        }
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        $con->beginTransaction();
        try {
            $prev = $this->getPrevious($con);
            $this->swapWith($prev, $con);
            $con->commit();

            return $this;
        } catch (Exception $e) {
            $con->rollback();
            throw $e;
        }
    }

    /**
     * Move the object higher in the list, i.e. exchanges its rank with the one of the next object
     *
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     */
    public function moveDown(PropelPDO $con = null)
    {
        if ($this->isLast($con)) {
            return $this;
        }
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        $con->beginTransaction();
        try {
            $next = $this->getNext($con);
            $this->swapWith($next, $con);
            $con->commit();

            return $this;
        } catch (Exception $e) {
            $con->rollback();
            throw $e;
        }
    }

    /**
     * Move the object to the top of the list
     *
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     */
    public function moveToTop(PropelPDO $con = null)
    {
        if ($this->isFirst()) {
            return $this;
        }

        return $this->moveToRank(1, $con);
    }

    /**
     * Move the object to the bottom of the list
     *
     * @param     PropelPDO $con optional connection
     *
     * @return integer the old object's rank
     */
    public function moveToBottom(PropelPDO $con = null)
    {
        if ($this->isLast($con)) {
            return false;
        }
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        $con->beginTransaction();
        try {
            $bottom = RevisionQuery::create()->getMaxRank($this->getDeliveryId(), $con);
            $res = $this->moveToRank($bottom, $con);
            $con->commit();

            return $res;
        } catch (Exception $e) {
            $con->rollback();
            throw $e;
        }
    }

    /**
     * Removes the current object from the list (moves it to the null scope).
     * The modifications are not persisted until the object is saved.
     *
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision the current object
     */
    public function removeFromList(PropelPDO $con = null)
    {
        // check if object is already removed
        if ($this->getDeliveryId() === null) {
            throw new PropelException('Object is already removed (has null scope)');
        }

        // move the object to the end of null scope
        $this->setDeliveryId(null);
    //    $this->insertAtBottom($con);

        return $this;
    }

    /**
     * Execute queries that were saved to be run inside the save transaction
     */
    protected function processSortableQueries($con)
    {
        foreach ($this->sortableQueries as $query) {
            $query['arguments'][]= $con;
            call_user_func_array($query['callable'], $query['arguments']);
        }
        $this->sortableQueries = array();
    }

}
