<?php


/**
 * Base class that represents a query for the 'revision' table.
 *
 *
 *
 * @method RevisionQuery orderById($order = Criteria::ASC) Order by the id column
 * @method RevisionQuery orderByDeliveryId($order = Criteria::ASC) Order by the delivery_id column
 * @method RevisionQuery orderByOrderNr($order = Criteria::ASC) Order by the order_nr column
 * @method RevisionQuery orderByRevisionNr($order = Criteria::ASC) Order by the revision_nr column
 * @method RevisionQuery orderByUploaderPersonId($order = Criteria::ASC) Order by the uploader_person_id column
 * @method RevisionQuery orderByReviewerPersonId($order = Criteria::ASC) Order by the reviewer_person_id column
 * @method RevisionQuery orderByApproverPersonId($order = Criteria::ASC) Order by the approver_person_id column
 * @method RevisionQuery orderByUploadDate($order = Criteria::ASC) Order by the upload_date column
 * @method RevisionQuery orderByReviewDate($order = Criteria::ASC) Order by the review_date column
 * @method RevisionQuery orderByApprovalDate($order = Criteria::ASC) Order by the approval_date column
 * @method RevisionQuery orderByUploadComment($order = Criteria::ASC) Order by the upload_comment column
 * @method RevisionQuery orderByReviewComment($order = Criteria::ASC) Order by the review_comment column
 * @method RevisionQuery orderByApprovalComment($order = Criteria::ASC) Order by the approval_comment column
 * @method RevisionQuery orderByOriginalDocument($order = Criteria::ASC) Order by the original_document column
 * @method RevisionQuery orderByAutogeneratedDate($order = Criteria::ASC) Order by the autogenerated_date column
 * @method RevisionQuery orderByTemplate($order = Criteria::ASC) Order by the template column
 * @method RevisionQuery orderByTemplateInstance($order = Criteria::ASC) Order by the template_instance column
 *
 * @method RevisionQuery groupById() Group by the id column
 * @method RevisionQuery groupByDeliveryId() Group by the delivery_id column
 * @method RevisionQuery groupByOrderNr() Group by the order_nr column
 * @method RevisionQuery groupByRevisionNr() Group by the revision_nr column
 * @method RevisionQuery groupByUploaderPersonId() Group by the uploader_person_id column
 * @method RevisionQuery groupByReviewerPersonId() Group by the reviewer_person_id column
 * @method RevisionQuery groupByApproverPersonId() Group by the approver_person_id column
 * @method RevisionQuery groupByUploadDate() Group by the upload_date column
 * @method RevisionQuery groupByReviewDate() Group by the review_date column
 * @method RevisionQuery groupByApprovalDate() Group by the approval_date column
 * @method RevisionQuery groupByUploadComment() Group by the upload_comment column
 * @method RevisionQuery groupByReviewComment() Group by the review_comment column
 * @method RevisionQuery groupByApprovalComment() Group by the approval_comment column
 * @method RevisionQuery groupByOriginalDocument() Group by the original_document column
 * @method RevisionQuery groupByAutogeneratedDate() Group by the autogenerated_date column
 * @method RevisionQuery groupByTemplate() Group by the template column
 * @method RevisionQuery groupByTemplateInstance() Group by the template_instance column
 *
 * @method RevisionQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method RevisionQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method RevisionQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method RevisionQuery leftJoinPersonRelatedByApproverPersonId($relationAlias = null) Adds a LEFT JOIN clause to the query using the PersonRelatedByApproverPersonId relation
 * @method RevisionQuery rightJoinPersonRelatedByApproverPersonId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PersonRelatedByApproverPersonId relation
 * @method RevisionQuery innerJoinPersonRelatedByApproverPersonId($relationAlias = null) Adds a INNER JOIN clause to the query using the PersonRelatedByApproverPersonId relation
 *
 * @method RevisionQuery leftJoinDeliveryRelatedByDeliveryId($relationAlias = null) Adds a LEFT JOIN clause to the query using the DeliveryRelatedByDeliveryId relation
 * @method RevisionQuery rightJoinDeliveryRelatedByDeliveryId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DeliveryRelatedByDeliveryId relation
 * @method RevisionQuery innerJoinDeliveryRelatedByDeliveryId($relationAlias = null) Adds a INNER JOIN clause to the query using the DeliveryRelatedByDeliveryId relation
 *
 * @method RevisionQuery leftJoinPersonRelatedByReviewerPersonId($relationAlias = null) Adds a LEFT JOIN clause to the query using the PersonRelatedByReviewerPersonId relation
 * @method RevisionQuery rightJoinPersonRelatedByReviewerPersonId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PersonRelatedByReviewerPersonId relation
 * @method RevisionQuery innerJoinPersonRelatedByReviewerPersonId($relationAlias = null) Adds a INNER JOIN clause to the query using the PersonRelatedByReviewerPersonId relation
 *
 * @method RevisionQuery leftJoinPersonRelatedByUploaderPersonId($relationAlias = null) Adds a LEFT JOIN clause to the query using the PersonRelatedByUploaderPersonId relation
 * @method RevisionQuery rightJoinPersonRelatedByUploaderPersonId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PersonRelatedByUploaderPersonId relation
 * @method RevisionQuery innerJoinPersonRelatedByUploaderPersonId($relationAlias = null) Adds a INNER JOIN clause to the query using the PersonRelatedByUploaderPersonId relation
 *
 * @method RevisionQuery leftJoinDeliveryRelatedByCurrentRevisionId($relationAlias = null) Adds a LEFT JOIN clause to the query using the DeliveryRelatedByCurrentRevisionId relation
 * @method RevisionQuery rightJoinDeliveryRelatedByCurrentRevisionId($relationAlias = null) Adds a RIGHT JOIN clause to the query using the DeliveryRelatedByCurrentRevisionId relation
 * @method RevisionQuery innerJoinDeliveryRelatedByCurrentRevisionId($relationAlias = null) Adds a INNER JOIN clause to the query using the DeliveryRelatedByCurrentRevisionId relation
 *
 * @method RevisionQuery leftJoinDocument($relationAlias = null) Adds a LEFT JOIN clause to the query using the Document relation
 * @method RevisionQuery rightJoinDocument($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Document relation
 * @method RevisionQuery innerJoinDocument($relationAlias = null) Adds a INNER JOIN clause to the query using the Document relation
 *
 * @method Revision findOne(PropelPDO $con = null) Return the first Revision matching the query
 * @method Revision findOneOrCreate(PropelPDO $con = null) Return the first Revision matching the query, or a new Revision object populated from the query conditions when no match is found
 *
 * @method Revision findOneByDeliveryId(int $delivery_id) Return the first Revision filtered by the delivery_id column
 * @method Revision findOneByOrderNr(int $order_nr) Return the first Revision filtered by the order_nr column
 * @method Revision findOneByRevisionNr(int $revision_nr) Return the first Revision filtered by the revision_nr column
 * @method Revision findOneByUploaderPersonId(int $uploader_person_id) Return the first Revision filtered by the uploader_person_id column
 * @method Revision findOneByReviewerPersonId(int $reviewer_person_id) Return the first Revision filtered by the reviewer_person_id column
 * @method Revision findOneByApproverPersonId(int $approver_person_id) Return the first Revision filtered by the approver_person_id column
 * @method Revision findOneByUploadDate(string $upload_date) Return the first Revision filtered by the upload_date column
 * @method Revision findOneByReviewDate(string $review_date) Return the first Revision filtered by the review_date column
 * @method Revision findOneByApprovalDate(string $approval_date) Return the first Revision filtered by the approval_date column
 * @method Revision findOneByUploadComment(string $upload_comment) Return the first Revision filtered by the upload_comment column
 * @method Revision findOneByReviewComment(string $review_comment) Return the first Revision filtered by the review_comment column
 * @method Revision findOneByApprovalComment(string $approval_comment) Return the first Revision filtered by the approval_comment column
 * @method Revision findOneByOriginalDocument(int $original_document) Return the first Revision filtered by the original_document column
 * @method Revision findOneByAutogeneratedDate(string $autogenerated_date) Return the first Revision filtered by the autogenerated_date column
 * @method Revision findOneByTemplate(int $template) Return the first Revision filtered by the template column
 * @method Revision findOneByTemplateInstance(int $template_instance) Return the first Revision filtered by the template_instance column
 *
 * @method array findById(int $id) Return Revision objects filtered by the id column
 * @method array findByDeliveryId(int $delivery_id) Return Revision objects filtered by the delivery_id column
 * @method array findByOrderNr(int $order_nr) Return Revision objects filtered by the order_nr column
 * @method array findByRevisionNr(int $revision_nr) Return Revision objects filtered by the revision_nr column
 * @method array findByUploaderPersonId(int $uploader_person_id) Return Revision objects filtered by the uploader_person_id column
 * @method array findByReviewerPersonId(int $reviewer_person_id) Return Revision objects filtered by the reviewer_person_id column
 * @method array findByApproverPersonId(int $approver_person_id) Return Revision objects filtered by the approver_person_id column
 * @method array findByUploadDate(string $upload_date) Return Revision objects filtered by the upload_date column
 * @method array findByReviewDate(string $review_date) Return Revision objects filtered by the review_date column
 * @method array findByApprovalDate(string $approval_date) Return Revision objects filtered by the approval_date column
 * @method array findByUploadComment(string $upload_comment) Return Revision objects filtered by the upload_comment column
 * @method array findByReviewComment(string $review_comment) Return Revision objects filtered by the review_comment column
 * @method array findByApprovalComment(string $approval_comment) Return Revision objects filtered by the approval_comment column
 * @method array findByOriginalDocument(int $original_document) Return Revision objects filtered by the original_document column
 * @method array findByAutogeneratedDate(string $autogenerated_date) Return Revision objects filtered by the autogenerated_date column
 * @method array findByTemplate(int $template) Return Revision objects filtered by the template column
 * @method array findByTemplateInstance(int $template_instance) Return Revision objects filtered by the template_instance column
 *
 * @package    propel.generator.atica.om
 */
abstract class BaseRevisionQuery extends ModelCriteria
{
    /**
     * Initializes internal state of BaseRevisionQuery object.
     *
     * @param     string $dbName The dabase name
     * @param     string $modelName The phpName of a model, e.g. 'Book'
     * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
     */
    public function __construct($dbName = 'atica', $modelName = 'Revision', $modelAlias = null)
    {
        parent::__construct($dbName, $modelName, $modelAlias);
    }

    /**
     * Returns a new RevisionQuery object.
     *
     * @param     string $modelAlias The alias of a model in the query
     * @param     RevisionQuery|Criteria $criteria Optional Criteria to build the query from
     *
     * @return RevisionQuery
     */
    public static function create($modelAlias = null, $criteria = null)
    {
        if ($criteria instanceof RevisionQuery) {
            return $criteria;
        }
        $query = new RevisionQuery();
        if (null !== $modelAlias) {
            $query->setModelAlias($modelAlias);
        }
        if ($criteria instanceof Criteria) {
            $query->mergeWith($criteria);
        }

        return $query;
    }

    /**
     * Find object by primary key.
     * Propel uses the instance pool to skip the database if the object exists.
     * Go fast if the query is untouched.
     *
     * <code>
     * $obj  = $c->findPk(12, $con);
     * </code>
     *
     * @param mixed $key Primary key to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return   Revision|Revision[]|mixed the result, formatted by the current formatter
     */
    public function findPk($key, $con = null)
    {
        if ($key === null) {
            return null;
        }
        if ((null !== ($obj = RevisionPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
            // the object is alredy in the instance pool
            return $obj;
        }
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME, Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        if ($this->formatter || $this->modelAlias || $this->with || $this->select
         || $this->selectColumns || $this->asColumns || $this->selectModifiers
         || $this->map || $this->having || $this->joins) {
            return $this->findPkComplex($key, $con);
        } else {
            return $this->findPkSimple($key, $con);
        }
    }

    /**
     * Alias of findPk to use instance pooling
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Revision A model object, or null if the key is not found
     * @throws   PropelException
     */
     public function findOneById($key, $con = null)
     {
        return $this->findPk($key, $con);
     }

    /**
     * Find object by primary key using raw SQL to go fast.
     * Bypass doSelect() and the object formatter by using generated code.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return   Revision A model object, or null if the key is not found
     * @throws   PropelException
     */
    protected function findPkSimple($key, $con)
    {
        $sql = 'SELECT `ID`, `DELIVERY_ID`, `ORDER_NR`, `REVISION_NR`, `UPLOADER_PERSON_ID`, `REVIEWER_PERSON_ID`, `APPROVER_PERSON_ID`, `UPLOAD_DATE`, `REVIEW_DATE`, `APPROVAL_DATE`, `UPLOAD_COMMENT`, `REVIEW_COMMENT`, `APPROVAL_COMMENT`, `ORIGINAL_DOCUMENT`, `AUTOGENERATED_DATE`, `TEMPLATE`, `TEMPLATE_INSTANCE` FROM `revision` WHERE `ID` = :p0';
        try {
            $stmt = $con->prepare($sql);
            $stmt->bindValue(':p0', $key, PDO::PARAM_INT);
            $stmt->execute();
        } catch (Exception $e) {
            Propel::log($e->getMessage(), Propel::LOG_ERR);
            throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
        }
        $obj = null;
        if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
            $obj = new Revision();
            $obj->hydrate($row);
            RevisionPeer::addInstanceToPool($obj, (string) $key);
        }
        $stmt->closeCursor();

        return $obj;
    }

    /**
     * Find object by primary key.
     *
     * @param     mixed $key Primary key to use for the query
     * @param     PropelPDO $con A connection object
     *
     * @return Revision|Revision[]|mixed the result, formatted by the current formatter
     */
    protected function findPkComplex($key, $con)
    {
        // As the query uses a PK condition, no limit(1) is necessary.
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKey($key)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
    }

    /**
     * Find objects by primary key
     * <code>
     * $objs = $c->findPks(array(12, 56, 832), $con);
     * </code>
     * @param     array $keys Primary keys to use for the query
     * @param     PropelPDO $con an optional connection object
     *
     * @return PropelObjectCollection|Revision[]|mixed the list of results, formatted by the current formatter
     */
    public function findPks($keys, $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
        }
        $this->basePreSelect($con);
        $criteria = $this->isKeepQuery() ? clone $this : $this;
        $stmt = $criteria
            ->filterByPrimaryKeys($keys)
            ->doSelect($con);

        return $criteria->getFormatter()->init($criteria)->format($stmt);
    }

    /**
     * Filter the query by primary key
     *
     * @param     mixed $key Primary key to use for the query
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKey($key)
    {

        return $this->addUsingAlias(RevisionPeer::ID, $key, Criteria::EQUAL);
    }

    /**
     * Filter the query by a list of primary keys
     *
     * @param     array $keys The list of primary key to use for the query
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByPrimaryKeys($keys)
    {

        return $this->addUsingAlias(RevisionPeer::ID, $keys, Criteria::IN);
    }

    /**
     * Filter the query on the id column
     *
     * Example usage:
     * <code>
     * $query->filterById(1234); // WHERE id = 1234
     * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
     * $query->filterById(array('min' => 12)); // WHERE id > 12
     * </code>
     *
     * @param     mixed $id The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterById($id = null, $comparison = null)
    {
        if (is_array($id) && null === $comparison) {
            $comparison = Criteria::IN;
        }

        return $this->addUsingAlias(RevisionPeer::ID, $id, $comparison);
    }

    /**
     * Filter the query on the delivery_id column
     *
     * Example usage:
     * <code>
     * $query->filterByDeliveryId(1234); // WHERE delivery_id = 1234
     * $query->filterByDeliveryId(array(12, 34)); // WHERE delivery_id IN (12, 34)
     * $query->filterByDeliveryId(array('min' => 12)); // WHERE delivery_id > 12
     * </code>
     *
     * @see       filterByDeliveryRelatedByDeliveryId()
     *
     * @param     mixed $deliveryId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByDeliveryId($deliveryId = null, $comparison = null)
    {
        if (is_array($deliveryId)) {
            $useMinMax = false;
            if (isset($deliveryId['min'])) {
                $this->addUsingAlias(RevisionPeer::DELIVERY_ID, $deliveryId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($deliveryId['max'])) {
                $this->addUsingAlias(RevisionPeer::DELIVERY_ID, $deliveryId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::DELIVERY_ID, $deliveryId, $comparison);
    }

    /**
     * Filter the query on the order_nr column
     *
     * Example usage:
     * <code>
     * $query->filterByOrderNr(1234); // WHERE order_nr = 1234
     * $query->filterByOrderNr(array(12, 34)); // WHERE order_nr IN (12, 34)
     * $query->filterByOrderNr(array('min' => 12)); // WHERE order_nr > 12
     * </code>
     *
     * @param     mixed $orderNr The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByOrderNr($orderNr = null, $comparison = null)
    {
        if (is_array($orderNr)) {
            $useMinMax = false;
            if (isset($orderNr['min'])) {
                $this->addUsingAlias(RevisionPeer::ORDER_NR, $orderNr['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($orderNr['max'])) {
                $this->addUsingAlias(RevisionPeer::ORDER_NR, $orderNr['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::ORDER_NR, $orderNr, $comparison);
    }

    /**
     * Filter the query on the revision_nr column
     *
     * Example usage:
     * <code>
     * $query->filterByRevisionNr(1234); // WHERE revision_nr = 1234
     * $query->filterByRevisionNr(array(12, 34)); // WHERE revision_nr IN (12, 34)
     * $query->filterByRevisionNr(array('min' => 12)); // WHERE revision_nr > 12
     * </code>
     *
     * @param     mixed $revisionNr The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByRevisionNr($revisionNr = null, $comparison = null)
    {
        if (is_array($revisionNr)) {
            $useMinMax = false;
            if (isset($revisionNr['min'])) {
                $this->addUsingAlias(RevisionPeer::REVISION_NR, $revisionNr['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($revisionNr['max'])) {
                $this->addUsingAlias(RevisionPeer::REVISION_NR, $revisionNr['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::REVISION_NR, $revisionNr, $comparison);
    }

    /**
     * Filter the query on the uploader_person_id column
     *
     * Example usage:
     * <code>
     * $query->filterByUploaderPersonId(1234); // WHERE uploader_person_id = 1234
     * $query->filterByUploaderPersonId(array(12, 34)); // WHERE uploader_person_id IN (12, 34)
     * $query->filterByUploaderPersonId(array('min' => 12)); // WHERE uploader_person_id > 12
     * </code>
     *
     * @see       filterByPersonRelatedByUploaderPersonId()
     *
     * @param     mixed $uploaderPersonId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByUploaderPersonId($uploaderPersonId = null, $comparison = null)
    {
        if (is_array($uploaderPersonId)) {
            $useMinMax = false;
            if (isset($uploaderPersonId['min'])) {
                $this->addUsingAlias(RevisionPeer::UPLOADER_PERSON_ID, $uploaderPersonId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($uploaderPersonId['max'])) {
                $this->addUsingAlias(RevisionPeer::UPLOADER_PERSON_ID, $uploaderPersonId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::UPLOADER_PERSON_ID, $uploaderPersonId, $comparison);
    }

    /**
     * Filter the query on the reviewer_person_id column
     *
     * Example usage:
     * <code>
     * $query->filterByReviewerPersonId(1234); // WHERE reviewer_person_id = 1234
     * $query->filterByReviewerPersonId(array(12, 34)); // WHERE reviewer_person_id IN (12, 34)
     * $query->filterByReviewerPersonId(array('min' => 12)); // WHERE reviewer_person_id > 12
     * </code>
     *
     * @see       filterByPersonRelatedByReviewerPersonId()
     *
     * @param     mixed $reviewerPersonId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByReviewerPersonId($reviewerPersonId = null, $comparison = null)
    {
        if (is_array($reviewerPersonId)) {
            $useMinMax = false;
            if (isset($reviewerPersonId['min'])) {
                $this->addUsingAlias(RevisionPeer::REVIEWER_PERSON_ID, $reviewerPersonId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($reviewerPersonId['max'])) {
                $this->addUsingAlias(RevisionPeer::REVIEWER_PERSON_ID, $reviewerPersonId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::REVIEWER_PERSON_ID, $reviewerPersonId, $comparison);
    }

    /**
     * Filter the query on the approver_person_id column
     *
     * Example usage:
     * <code>
     * $query->filterByApproverPersonId(1234); // WHERE approver_person_id = 1234
     * $query->filterByApproverPersonId(array(12, 34)); // WHERE approver_person_id IN (12, 34)
     * $query->filterByApproverPersonId(array('min' => 12)); // WHERE approver_person_id > 12
     * </code>
     *
     * @see       filterByPersonRelatedByApproverPersonId()
     *
     * @param     mixed $approverPersonId The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByApproverPersonId($approverPersonId = null, $comparison = null)
    {
        if (is_array($approverPersonId)) {
            $useMinMax = false;
            if (isset($approverPersonId['min'])) {
                $this->addUsingAlias(RevisionPeer::APPROVER_PERSON_ID, $approverPersonId['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($approverPersonId['max'])) {
                $this->addUsingAlias(RevisionPeer::APPROVER_PERSON_ID, $approverPersonId['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::APPROVER_PERSON_ID, $approverPersonId, $comparison);
    }

    /**
     * Filter the query on the upload_date column
     *
     * Example usage:
     * <code>
     * $query->filterByUploadDate('2011-03-14'); // WHERE upload_date = '2011-03-14'
     * $query->filterByUploadDate('now'); // WHERE upload_date = '2011-03-14'
     * $query->filterByUploadDate(array('max' => 'yesterday')); // WHERE upload_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $uploadDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByUploadDate($uploadDate = null, $comparison = null)
    {
        if (is_array($uploadDate)) {
            $useMinMax = false;
            if (isset($uploadDate['min'])) {
                $this->addUsingAlias(RevisionPeer::UPLOAD_DATE, $uploadDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($uploadDate['max'])) {
                $this->addUsingAlias(RevisionPeer::UPLOAD_DATE, $uploadDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::UPLOAD_DATE, $uploadDate, $comparison);
    }

    /**
     * Filter the query on the review_date column
     *
     * Example usage:
     * <code>
     * $query->filterByReviewDate('2011-03-14'); // WHERE review_date = '2011-03-14'
     * $query->filterByReviewDate('now'); // WHERE review_date = '2011-03-14'
     * $query->filterByReviewDate(array('max' => 'yesterday')); // WHERE review_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $reviewDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByReviewDate($reviewDate = null, $comparison = null)
    {
        if (is_array($reviewDate)) {
            $useMinMax = false;
            if (isset($reviewDate['min'])) {
                $this->addUsingAlias(RevisionPeer::REVIEW_DATE, $reviewDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($reviewDate['max'])) {
                $this->addUsingAlias(RevisionPeer::REVIEW_DATE, $reviewDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::REVIEW_DATE, $reviewDate, $comparison);
    }

    /**
     * Filter the query on the approval_date column
     *
     * Example usage:
     * <code>
     * $query->filterByApprovalDate('2011-03-14'); // WHERE approval_date = '2011-03-14'
     * $query->filterByApprovalDate('now'); // WHERE approval_date = '2011-03-14'
     * $query->filterByApprovalDate(array('max' => 'yesterday')); // WHERE approval_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $approvalDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByApprovalDate($approvalDate = null, $comparison = null)
    {
        if (is_array($approvalDate)) {
            $useMinMax = false;
            if (isset($approvalDate['min'])) {
                $this->addUsingAlias(RevisionPeer::APPROVAL_DATE, $approvalDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($approvalDate['max'])) {
                $this->addUsingAlias(RevisionPeer::APPROVAL_DATE, $approvalDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::APPROVAL_DATE, $approvalDate, $comparison);
    }

    /**
     * Filter the query on the upload_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByUploadComment('fooValue');   // WHERE upload_comment = 'fooValue'
     * $query->filterByUploadComment('%fooValue%'); // WHERE upload_comment LIKE '%fooValue%'
     * </code>
     *
     * @param     string $uploadComment The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByUploadComment($uploadComment = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($uploadComment)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $uploadComment)) {
                $uploadComment = str_replace('*', '%', $uploadComment);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RevisionPeer::UPLOAD_COMMENT, $uploadComment, $comparison);
    }

    /**
     * Filter the query on the review_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByReviewComment('fooValue');   // WHERE review_comment = 'fooValue'
     * $query->filterByReviewComment('%fooValue%'); // WHERE review_comment LIKE '%fooValue%'
     * </code>
     *
     * @param     string $reviewComment The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByReviewComment($reviewComment = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($reviewComment)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $reviewComment)) {
                $reviewComment = str_replace('*', '%', $reviewComment);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RevisionPeer::REVIEW_COMMENT, $reviewComment, $comparison);
    }

    /**
     * Filter the query on the approval_comment column
     *
     * Example usage:
     * <code>
     * $query->filterByApprovalComment('fooValue');   // WHERE approval_comment = 'fooValue'
     * $query->filterByApprovalComment('%fooValue%'); // WHERE approval_comment LIKE '%fooValue%'
     * </code>
     *
     * @param     string $approvalComment The value to use as filter.
     *              Accepts wildcards (* and % trigger a LIKE)
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByApprovalComment($approvalComment = null, $comparison = null)
    {
        if (null === $comparison) {
            if (is_array($approvalComment)) {
                $comparison = Criteria::IN;
            } elseif (preg_match('/[\%\*]/', $approvalComment)) {
                $approvalComment = str_replace('*', '%', $approvalComment);
                $comparison = Criteria::LIKE;
            }
        }

        return $this->addUsingAlias(RevisionPeer::APPROVAL_COMMENT, $approvalComment, $comparison);
    }

    /**
     * Filter the query on the original_document column
     *
     * Example usage:
     * <code>
     * $query->filterByOriginalDocument(1234); // WHERE original_document = 1234
     * $query->filterByOriginalDocument(array(12, 34)); // WHERE original_document IN (12, 34)
     * $query->filterByOriginalDocument(array('min' => 12)); // WHERE original_document > 12
     * </code>
     *
     * @param     mixed $originalDocument The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByOriginalDocument($originalDocument = null, $comparison = null)
    {
        if (is_array($originalDocument)) {
            $useMinMax = false;
            if (isset($originalDocument['min'])) {
                $this->addUsingAlias(RevisionPeer::ORIGINAL_DOCUMENT, $originalDocument['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($originalDocument['max'])) {
                $this->addUsingAlias(RevisionPeer::ORIGINAL_DOCUMENT, $originalDocument['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::ORIGINAL_DOCUMENT, $originalDocument, $comparison);
    }

    /**
     * Filter the query on the autogenerated_date column
     *
     * Example usage:
     * <code>
     * $query->filterByAutogeneratedDate('2011-03-14'); // WHERE autogenerated_date = '2011-03-14'
     * $query->filterByAutogeneratedDate('now'); // WHERE autogenerated_date = '2011-03-14'
     * $query->filterByAutogeneratedDate(array('max' => 'yesterday')); // WHERE autogenerated_date > '2011-03-13'
     * </code>
     *
     * @param     mixed $autogeneratedDate The value to use as filter.
     *              Values can be integers (unix timestamps), DateTime objects, or strings.
     *              Empty strings are treated as NULL.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByAutogeneratedDate($autogeneratedDate = null, $comparison = null)
    {
        if (is_array($autogeneratedDate)) {
            $useMinMax = false;
            if (isset($autogeneratedDate['min'])) {
                $this->addUsingAlias(RevisionPeer::AUTOGENERATED_DATE, $autogeneratedDate['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($autogeneratedDate['max'])) {
                $this->addUsingAlias(RevisionPeer::AUTOGENERATED_DATE, $autogeneratedDate['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::AUTOGENERATED_DATE, $autogeneratedDate, $comparison);
    }

    /**
     * Filter the query on the template column
     *
     * Example usage:
     * <code>
     * $query->filterByTemplate(1234); // WHERE template = 1234
     * $query->filterByTemplate(array(12, 34)); // WHERE template IN (12, 34)
     * $query->filterByTemplate(array('min' => 12)); // WHERE template > 12
     * </code>
     *
     * @param     mixed $template The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByTemplate($template = null, $comparison = null)
    {
        if (is_array($template)) {
            $useMinMax = false;
            if (isset($template['min'])) {
                $this->addUsingAlias(RevisionPeer::TEMPLATE, $template['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($template['max'])) {
                $this->addUsingAlias(RevisionPeer::TEMPLATE, $template['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::TEMPLATE, $template, $comparison);
    }

    /**
     * Filter the query on the template_instance column
     *
     * Example usage:
     * <code>
     * $query->filterByTemplateInstance(1234); // WHERE template_instance = 1234
     * $query->filterByTemplateInstance(array(12, 34)); // WHERE template_instance IN (12, 34)
     * $query->filterByTemplateInstance(array('min' => 12)); // WHERE template_instance > 12
     * </code>
     *
     * @param     mixed $templateInstance The value to use as filter.
     *              Use scalar values for equality.
     *              Use array values for in_array() equivalent.
     *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function filterByTemplateInstance($templateInstance = null, $comparison = null)
    {
        if (is_array($templateInstance)) {
            $useMinMax = false;
            if (isset($templateInstance['min'])) {
                $this->addUsingAlias(RevisionPeer::TEMPLATE_INSTANCE, $templateInstance['min'], Criteria::GREATER_EQUAL);
                $useMinMax = true;
            }
            if (isset($templateInstance['max'])) {
                $this->addUsingAlias(RevisionPeer::TEMPLATE_INSTANCE, $templateInstance['max'], Criteria::LESS_EQUAL);
                $useMinMax = true;
            }
            if ($useMinMax) {
                return $this;
            }
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }
        }

        return $this->addUsingAlias(RevisionPeer::TEMPLATE_INSTANCE, $templateInstance, $comparison);
    }

    /**
     * Filter the query by a related Person object
     *
     * @param   Person|PropelObjectCollection $person The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPersonRelatedByApproverPersonId($person, $comparison = null)
    {
        if ($person instanceof Person) {
            return $this
                ->addUsingAlias(RevisionPeer::APPROVER_PERSON_ID, $person->getId(), $comparison);
        } elseif ($person instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RevisionPeer::APPROVER_PERSON_ID, $person->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByPersonRelatedByApproverPersonId() only accepts arguments of type Person or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PersonRelatedByApproverPersonId relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinPersonRelatedByApproverPersonId($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PersonRelatedByApproverPersonId');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PersonRelatedByApproverPersonId');
        }

        return $this;
    }

    /**
     * Use the PersonRelatedByApproverPersonId relation Person object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PersonQuery A secondary query class using the current class as primary query
     */
    public function usePersonRelatedByApproverPersonIdQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPersonRelatedByApproverPersonId($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PersonRelatedByApproverPersonId', 'PersonQuery');
    }

    /**
     * Filter the query by a related Delivery object
     *
     * @param   Delivery|PropelObjectCollection $delivery The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDeliveryRelatedByDeliveryId($delivery, $comparison = null)
    {
        if ($delivery instanceof Delivery) {
            return $this
                ->addUsingAlias(RevisionPeer::DELIVERY_ID, $delivery->getId(), $comparison);
        } elseif ($delivery instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RevisionPeer::DELIVERY_ID, $delivery->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByDeliveryRelatedByDeliveryId() only accepts arguments of type Delivery or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DeliveryRelatedByDeliveryId relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinDeliveryRelatedByDeliveryId($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DeliveryRelatedByDeliveryId');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DeliveryRelatedByDeliveryId');
        }

        return $this;
    }

    /**
     * Use the DeliveryRelatedByDeliveryId relation Delivery object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DeliveryQuery A secondary query class using the current class as primary query
     */
    public function useDeliveryRelatedByDeliveryIdQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDeliveryRelatedByDeliveryId($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DeliveryRelatedByDeliveryId', 'DeliveryQuery');
    }

    /**
     * Filter the query by a related Person object
     *
     * @param   Person|PropelObjectCollection $person The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPersonRelatedByReviewerPersonId($person, $comparison = null)
    {
        if ($person instanceof Person) {
            return $this
                ->addUsingAlias(RevisionPeer::REVIEWER_PERSON_ID, $person->getId(), $comparison);
        } elseif ($person instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RevisionPeer::REVIEWER_PERSON_ID, $person->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByPersonRelatedByReviewerPersonId() only accepts arguments of type Person or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PersonRelatedByReviewerPersonId relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinPersonRelatedByReviewerPersonId($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PersonRelatedByReviewerPersonId');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PersonRelatedByReviewerPersonId');
        }

        return $this;
    }

    /**
     * Use the PersonRelatedByReviewerPersonId relation Person object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PersonQuery A secondary query class using the current class as primary query
     */
    public function usePersonRelatedByReviewerPersonIdQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinPersonRelatedByReviewerPersonId($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PersonRelatedByReviewerPersonId', 'PersonQuery');
    }

    /**
     * Filter the query by a related Person object
     *
     * @param   Person|PropelObjectCollection $person The related object(s) to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByPersonRelatedByUploaderPersonId($person, $comparison = null)
    {
        if ($person instanceof Person) {
            return $this
                ->addUsingAlias(RevisionPeer::UPLOADER_PERSON_ID, $person->getId(), $comparison);
        } elseif ($person instanceof PropelObjectCollection) {
            if (null === $comparison) {
                $comparison = Criteria::IN;
            }

            return $this
                ->addUsingAlias(RevisionPeer::UPLOADER_PERSON_ID, $person->toKeyValue('PrimaryKey', 'Id'), $comparison);
        } else {
            throw new PropelException('filterByPersonRelatedByUploaderPersonId() only accepts arguments of type Person or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the PersonRelatedByUploaderPersonId relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinPersonRelatedByUploaderPersonId($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('PersonRelatedByUploaderPersonId');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'PersonRelatedByUploaderPersonId');
        }

        return $this;
    }

    /**
     * Use the PersonRelatedByUploaderPersonId relation Person object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   PersonQuery A secondary query class using the current class as primary query
     */
    public function usePersonRelatedByUploaderPersonIdQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinPersonRelatedByUploaderPersonId($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'PersonRelatedByUploaderPersonId', 'PersonQuery');
    }

    /**
     * Filter the query by a related Delivery object
     *
     * @param   Delivery|PropelObjectCollection $delivery  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDeliveryRelatedByCurrentRevisionId($delivery, $comparison = null)
    {
        if ($delivery instanceof Delivery) {
            return $this
                ->addUsingAlias(RevisionPeer::ID, $delivery->getCurrentRevisionId(), $comparison);
        } elseif ($delivery instanceof PropelObjectCollection) {
            return $this
                ->useDeliveryRelatedByCurrentRevisionIdQuery()
                ->filterByPrimaryKeys($delivery->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDeliveryRelatedByCurrentRevisionId() only accepts arguments of type Delivery or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the DeliveryRelatedByCurrentRevisionId relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinDeliveryRelatedByCurrentRevisionId($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('DeliveryRelatedByCurrentRevisionId');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'DeliveryRelatedByCurrentRevisionId');
        }

        return $this;
    }

    /**
     * Use the DeliveryRelatedByCurrentRevisionId relation Delivery object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DeliveryQuery A secondary query class using the current class as primary query
     */
    public function useDeliveryRelatedByCurrentRevisionIdQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
    {
        return $this
            ->joinDeliveryRelatedByCurrentRevisionId($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'DeliveryRelatedByCurrentRevisionId', 'DeliveryQuery');
    }

    /**
     * Filter the query by a related Document object
     *
     * @param   Document|PropelObjectCollection $document  the related object to use as filter
     * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
     *
     * @return   RevisionQuery The current query, for fluid interface
     * @throws   PropelException - if the provided filter is invalid.
     */
    public function filterByDocument($document, $comparison = null)
    {
        if ($document instanceof Document) {
            return $this
                ->addUsingAlias(RevisionPeer::ID, $document->getRevisionId(), $comparison);
        } elseif ($document instanceof PropelObjectCollection) {
            return $this
                ->useDocumentQuery()
                ->filterByPrimaryKeys($document->getPrimaryKeys())
                ->endUse();
        } else {
            throw new PropelException('filterByDocument() only accepts arguments of type Document or PropelCollection');
        }
    }

    /**
     * Adds a JOIN clause to the query using the Document relation
     *
     * @param     string $relationAlias optional alias for the relation
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function joinDocument($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        $tableMap = $this->getTableMap();
        $relationMap = $tableMap->getRelation('Document');

        // create a ModelJoin object for this join
        $join = new ModelJoin();
        $join->setJoinType($joinType);
        $join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
        if ($previousJoin = $this->getPreviousJoin()) {
            $join->setPreviousJoin($previousJoin);
        }

        // add the ModelJoin to the current object
        if ($relationAlias) {
            $this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
            $this->addJoinObject($join, $relationAlias);
        } else {
            $this->addJoinObject($join, 'Document');
        }

        return $this;
    }

    /**
     * Use the Document relation Document object
     *
     * @see       useQuery()
     *
     * @param     string $relationAlias optional alias for the relation,
     *                                   to be used as main alias in the secondary query
     * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
     *
     * @return   DocumentQuery A secondary query class using the current class as primary query
     */
    public function useDocumentQuery($relationAlias = null, $joinType = Criteria::INNER_JOIN)
    {
        return $this
            ->joinDocument($relationAlias, $joinType)
            ->useQuery($relationAlias ? $relationAlias : 'Document', 'DocumentQuery');
    }

    /**
     * Exclude object from result
     *
     * @param   Revision $revision Object to remove from the list of results
     *
     * @return RevisionQuery The current query, for fluid interface
     */
    public function prune($revision = null)
    {
        if ($revision) {
            $this->addUsingAlias(RevisionPeer::ID, $revision->getId(), Criteria::NOT_EQUAL);
        }

        return $this;
    }

    // sortable behavior

    /**
     * Returns the objects in a certain list, from the list scope
     *
     * @param     int $scope		Scope to determine which objects node to return
     *
     * @return    RevisionQuery The current query, for fluid interface
     */
    public function inList($scope = null)
    {
        return $this->addUsingAlias(RevisionPeer::SCOPE_COL, $scope, Criteria::EQUAL);
    }

    /**
     * Filter the query based on a rank in the list
     *
     * @param     integer   $rank rank
     * @param     int $scope		Scope to determine which suite to consider
     *
     * @return    RevisionQuery The current query, for fluid interface
     */
    public function filterByRank($rank, $scope = null)
    {
        return $this
            ->inList($scope)
            ->addUsingAlias(RevisionPeer::RANK_COL, $rank, Criteria::EQUAL);
    }

    /**
     * Order the query based on the rank in the list.
     * Using the default $order, returns the item with the lowest rank first
     *
     * @param     string $order either Criteria::ASC (default) or Criteria::DESC
     *
     * @return    RevisionQuery The current query, for fluid interface
     */
    public function orderByRank($order = Criteria::ASC)
    {
        $order = strtoupper($order);
        switch ($order) {
            case Criteria::ASC:
                return $this->addAscendingOrderByColumn($this->getAliasedColName(RevisionPeer::RANK_COL));
                break;
            case Criteria::DESC:
                return $this->addDescendingOrderByColumn($this->getAliasedColName(RevisionPeer::RANK_COL));
                break;
            default:
                throw new PropelException('RevisionQuery::orderBy() only accepts "asc" or "desc" as argument');
        }
    }

    /**
     * Get an item from the list based on its rank
     *
     * @param     integer   $rank rank
     * @param     int $scope		Scope to determine which suite to consider
     * @param     PropelPDO $con optional connection
     *
     * @return    Revision
     */
    public function findOneByRank($rank, $scope = null, PropelPDO $con = null)
    {
        return $this
            ->filterByRank($rank, $scope)
            ->findOne($con);
    }

    /**
     * Returns a list of objects
     *
     * @param      int $scope		Scope to determine which list to return
     * @param      PropelPDO $con	Connection to use.
     *
     * @return     mixed the list of results, formatted by the current formatter
     */
    public function findList($scope = null, $con = null)
    {
        return $this
            ->inList($scope)
            ->orderByRank()
            ->find($con);
    }

    /**
     * Get the highest rank
     *
     * @param      int $scope		Scope to determine which suite to consider
     * @param     PropelPDO optional connection
     *
     * @return    integer highest position
     */
    public function getMaxRank($scope = null, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }
        // shift the objects with a position lower than the one of object
        $this->addSelectColumn('MAX(' . RevisionPeer::RANK_COL . ')');
        $this->add(RevisionPeer::SCOPE_COL, $scope, Criteria::EQUAL);
        $stmt = $this->doSelect($con);

        return $stmt->fetchColumn();
    }

    /**
     * Reorder a set of sortable objects based on a list of id/position
     * Beware that there is no check made on the positions passed
     * So incoherent positions will result in an incoherent list
     *
     * @param     array     $order id => rank pairs
     * @param     PropelPDO $con   optional connection
     *
     * @return    boolean true if the reordering took place, false if a database problem prevented it
     */
    public function reorder(array $order, PropelPDO $con = null)
    {
        if ($con === null) {
            $con = Propel::getConnection(RevisionPeer::DATABASE_NAME);
        }

        $con->beginTransaction();
        try {
            $ids = array_keys($order);
            $objects = $this->findPks($ids, $con);
            foreach ($objects as $object) {
                $pk = $object->getPrimaryKey();
                if ($object->getOrderNr() != $order[$pk]) {
                    $object->setOrderNr($order[$pk]);
                    $object->save($con);
                }
            }
            $con->commit();

            return true;
        } catch (PropelException $e) {
            $con->rollback();
            throw $e;
        }
    }

}
